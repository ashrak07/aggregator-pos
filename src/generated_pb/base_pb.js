// source: base.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.base.AllCurrencies', null, global);
goog.exportSymbol('proto.base.AllCurrencyRates', null, global);
goog.exportSymbol('proto.base.CreateCurrencyRateRequest', null, global);
goog.exportSymbol('proto.base.CreateCurrencyRequest', null, global);
goog.exportSymbol('proto.base.CreateCurrencyResponse', null, global);
goog.exportSymbol('proto.base.CurrencyRateRequest', null, global);
goog.exportSymbol('proto.base.CurrencyRateResponse', null, global);
goog.exportSymbol('proto.base.CurrencyRequest', null, global);
goog.exportSymbol('proto.base.CurrencyResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.CurrencyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.base.CurrencyRequest.repeatedFields_, null);
};
goog.inherits(proto.base.CurrencyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.CurrencyRequest.displayName = 'proto.base.CurrencyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.CurrencyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.base.CurrencyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.CurrencyResponse.displayName = 'proto.base.CurrencyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.AllCurrencies = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.base.AllCurrencies.repeatedFields_, null);
};
goog.inherits(proto.base.AllCurrencies, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.AllCurrencies.displayName = 'proto.base.AllCurrencies';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.CurrencyRateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.base.CurrencyRateRequest.repeatedFields_, null);
};
goog.inherits(proto.base.CurrencyRateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.CurrencyRateRequest.displayName = 'proto.base.CurrencyRateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.CurrencyRateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.base.CurrencyRateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.CurrencyRateResponse.displayName = 'proto.base.CurrencyRateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.AllCurrencyRates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.base.AllCurrencyRates.repeatedFields_, null);
};
goog.inherits(proto.base.AllCurrencyRates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.AllCurrencyRates.displayName = 'proto.base.AllCurrencyRates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.CreateCurrencyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.base.CreateCurrencyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.CreateCurrencyRequest.displayName = 'proto.base.CreateCurrencyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.CreateCurrencyRateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.base.CreateCurrencyRateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.CreateCurrencyRateRequest.displayName = 'proto.base.CreateCurrencyRateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.base.CreateCurrencyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.base.CreateCurrencyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.base.CreateCurrencyResponse.displayName = 'proto.base.CreateCurrencyResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.base.CurrencyRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.CurrencyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.base.CurrencyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.CurrencyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CurrencyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldNameList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    fieldValueList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pageSize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.CurrencyRequest}
 */
proto.base.CurrencyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.CurrencyRequest;
  return proto.base.CurrencyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.CurrencyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.CurrencyRequest}
 */
proto.base.CurrencyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.CurrencyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.CurrencyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.CurrencyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CurrencyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFieldValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated string field_name = 1;
 * @return {!Array<string>}
 */
proto.base.CurrencyRequest.prototype.getFieldNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.base.CurrencyRequest} returns this
 */
proto.base.CurrencyRequest.prototype.setFieldNameList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.base.CurrencyRequest} returns this
 */
proto.base.CurrencyRequest.prototype.addFieldName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.base.CurrencyRequest} returns this
 */
proto.base.CurrencyRequest.prototype.clearFieldNameList = function() {
  return this.setFieldNameList([]);
};


/**
 * repeated string field_value = 2;
 * @return {!Array<string>}
 */
proto.base.CurrencyRequest.prototype.getFieldValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.base.CurrencyRequest} returns this
 */
proto.base.CurrencyRequest.prototype.setFieldValueList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.base.CurrencyRequest} returns this
 */
proto.base.CurrencyRequest.prototype.addFieldValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.base.CurrencyRequest} returns this
 */
proto.base.CurrencyRequest.prototype.clearFieldValueList = function() {
  return this.setFieldValueList([]);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.base.CurrencyRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyRequest} returns this
 */
proto.base.CurrencyRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 page_size = 4;
 * @return {number}
 */
proto.base.CurrencyRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyRequest} returns this
 */
proto.base.CurrencyRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.CurrencyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.base.CurrencyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.CurrencyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CurrencyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    writeDate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fullName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    position: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    currencyUnitLabel: jspb.Message.getFieldWithDefault(msg, 10, ""),
    currencySubunitLabel: jspb.Message.getFieldWithDefault(msg, 11, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.CurrencyResponse}
 */
proto.base.CurrencyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.CurrencyResponse;
  return proto.base.CurrencyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.CurrencyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.CurrencyResponse}
 */
proto.base.CurrencyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPosition(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyUnitLabel(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencySubunitLabel(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.CurrencyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.CurrencyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.CurrencyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CurrencyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPosition();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getCurrencyUnitLabel();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCurrencySubunitLabel();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.base.CurrencyResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.base.CurrencyResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.base.CurrencyResponse.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string create_date = 4;
 * @return {string}
 */
proto.base.CurrencyResponse.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string write_date = 5;
 * @return {string}
 */
proto.base.CurrencyResponse.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 create_uid = 6;
 * @return {number}
 */
proto.base.CurrencyResponse.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 write_uid = 7;
 * @return {number}
 */
proto.base.CurrencyResponse.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string full_name = 8;
 * @return {string}
 */
proto.base.CurrencyResponse.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool position = 9;
 * @return {boolean}
 */
proto.base.CurrencyResponse.prototype.getPosition = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setPosition = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string currency_unit_label = 10;
 * @return {string}
 */
proto.base.CurrencyResponse.prototype.getCurrencyUnitLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setCurrencyUnitLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string currency_subunit_label = 11;
 * @return {string}
 */
proto.base.CurrencyResponse.prototype.getCurrencySubunitLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setCurrencySubunitLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool active = 12;
 * @return {boolean}
 */
proto.base.CurrencyResponse.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.base.CurrencyResponse} returns this
 */
proto.base.CurrencyResponse.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.base.AllCurrencies.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.AllCurrencies.prototype.toObject = function(opt_includeInstance) {
  return proto.base.AllCurrencies.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.AllCurrencies} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.AllCurrencies.toObject = function(includeInstance, msg) {
  var f, obj = {
    currenciesList: jspb.Message.toObjectList(msg.getCurrenciesList(),
    proto.base.CurrencyResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.AllCurrencies}
 */
proto.base.AllCurrencies.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.AllCurrencies;
  return proto.base.AllCurrencies.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.AllCurrencies} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.AllCurrencies}
 */
proto.base.AllCurrencies.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.base.CurrencyResponse;
      reader.readMessage(value,proto.base.CurrencyResponse.deserializeBinaryFromReader);
      msg.addCurrencies(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.AllCurrencies.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.AllCurrencies.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.AllCurrencies} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.AllCurrencies.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrenciesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.base.CurrencyResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CurrencyResponse currencies = 1;
 * @return {!Array<!proto.base.CurrencyResponse>}
 */
proto.base.AllCurrencies.prototype.getCurrenciesList = function() {
  return /** @type{!Array<!proto.base.CurrencyResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.base.CurrencyResponse, 1));
};


/**
 * @param {!Array<!proto.base.CurrencyResponse>} value
 * @return {!proto.base.AllCurrencies} returns this
*/
proto.base.AllCurrencies.prototype.setCurrenciesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.base.CurrencyResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.base.CurrencyResponse}
 */
proto.base.AllCurrencies.prototype.addCurrencies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.base.CurrencyResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.base.AllCurrencies} returns this
 */
proto.base.AllCurrencies.prototype.clearCurrenciesList = function() {
  return this.setCurrenciesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.base.CurrencyRateRequest.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.CurrencyRateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.base.CurrencyRateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.CurrencyRateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CurrencyRateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldNameList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    fieldValueList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    operatorList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    page: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pageSize: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.CurrencyRateRequest}
 */
proto.base.CurrencyRateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.CurrencyRateRequest;
  return proto.base.CurrencyRateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.CurrencyRateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.CurrencyRateRequest}
 */
proto.base.CurrencyRateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addOperator(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.CurrencyRateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.CurrencyRateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.CurrencyRateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CurrencyRateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFieldValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getOperatorList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * repeated string field_name = 1;
 * @return {!Array<string>}
 */
proto.base.CurrencyRateRequest.prototype.getFieldNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.setFieldNameList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.addFieldName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.clearFieldNameList = function() {
  return this.setFieldNameList([]);
};


/**
 * repeated string field_value = 2;
 * @return {!Array<string>}
 */
proto.base.CurrencyRateRequest.prototype.getFieldValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.setFieldValueList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.addFieldValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.clearFieldValueList = function() {
  return this.setFieldValueList([]);
};


/**
 * repeated string operator = 3;
 * @return {!Array<string>}
 */
proto.base.CurrencyRateRequest.prototype.getOperatorList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.setOperatorList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.addOperator = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.clearOperatorList = function() {
  return this.setOperatorList([]);
};


/**
 * optional int32 page = 4;
 * @return {number}
 */
proto.base.CurrencyRateRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 page_size = 5;
 * @return {number}
 */
proto.base.CurrencyRateRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyRateRequest} returns this
 */
proto.base.CurrencyRateRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.CurrencyRateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.base.CurrencyRateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.CurrencyRateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CurrencyRateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currencyId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dateCurrencyRate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rate: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    writeDate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.CurrencyRateResponse}
 */
proto.base.CurrencyRateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.CurrencyRateResponse;
  return proto.base.CurrencyRateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.CurrencyRateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.CurrencyRateResponse}
 */
proto.base.CurrencyRateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrencyId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateCurrencyRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.CurrencyRateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.CurrencyRateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.CurrencyRateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CurrencyRateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCurrencyId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDateCurrencyRate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRate();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.base.CurrencyRateResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyRateResponse} returns this
 */
proto.base.CurrencyRateResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 currency_id = 2;
 * @return {number}
 */
proto.base.CurrencyRateResponse.prototype.getCurrencyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyRateResponse} returns this
 */
proto.base.CurrencyRateResponse.prototype.setCurrencyId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string date_currency_rate = 3;
 * @return {string}
 */
proto.base.CurrencyRateResponse.prototype.getDateCurrencyRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyRateResponse} returns this
 */
proto.base.CurrencyRateResponse.prototype.setDateCurrencyRate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float rate = 4;
 * @return {number}
 */
proto.base.CurrencyRateResponse.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyRateResponse} returns this
 */
proto.base.CurrencyRateResponse.prototype.setRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string write_date = 5;
 * @return {string}
 */
proto.base.CurrencyRateResponse.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyRateResponse} returns this
 */
proto.base.CurrencyRateResponse.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string create_date = 6;
 * @return {string}
 */
proto.base.CurrencyRateResponse.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CurrencyRateResponse} returns this
 */
proto.base.CurrencyRateResponse.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 create_uid = 7;
 * @return {number}
 */
proto.base.CurrencyRateResponse.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyRateResponse} returns this
 */
proto.base.CurrencyRateResponse.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 write_uid = 8;
 * @return {number}
 */
proto.base.CurrencyRateResponse.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CurrencyRateResponse} returns this
 */
proto.base.CurrencyRateResponse.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.base.AllCurrencyRates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.AllCurrencyRates.prototype.toObject = function(opt_includeInstance) {
  return proto.base.AllCurrencyRates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.AllCurrencyRates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.AllCurrencyRates.toObject = function(includeInstance, msg) {
  var f, obj = {
    currencyratesList: jspb.Message.toObjectList(msg.getCurrencyratesList(),
    proto.base.CurrencyRateResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.AllCurrencyRates}
 */
proto.base.AllCurrencyRates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.AllCurrencyRates;
  return proto.base.AllCurrencyRates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.AllCurrencyRates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.AllCurrencyRates}
 */
proto.base.AllCurrencyRates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.base.CurrencyRateResponse;
      reader.readMessage(value,proto.base.CurrencyRateResponse.deserializeBinaryFromReader);
      msg.addCurrencyrates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.AllCurrencyRates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.AllCurrencyRates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.AllCurrencyRates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.AllCurrencyRates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrencyratesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.base.CurrencyRateResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CurrencyRateResponse currencyRates = 1;
 * @return {!Array<!proto.base.CurrencyRateResponse>}
 */
proto.base.AllCurrencyRates.prototype.getCurrencyratesList = function() {
  return /** @type{!Array<!proto.base.CurrencyRateResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.base.CurrencyRateResponse, 1));
};


/**
 * @param {!Array<!proto.base.CurrencyRateResponse>} value
 * @return {!proto.base.AllCurrencyRates} returns this
*/
proto.base.AllCurrencyRates.prototype.setCurrencyratesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.base.CurrencyRateResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.base.CurrencyRateResponse}
 */
proto.base.AllCurrencyRates.prototype.addCurrencyrates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.base.CurrencyRateResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.base.AllCurrencyRates} returns this
 */
proto.base.AllCurrencyRates.prototype.clearCurrencyratesList = function() {
  return this.setCurrencyratesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.CreateCurrencyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.base.CreateCurrencyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.CreateCurrencyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CreateCurrencyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    writeDate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fullName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    position: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    currencyUnitLabel: jspb.Message.getFieldWithDefault(msg, 9, ""),
    currencySubunitLabel: jspb.Message.getFieldWithDefault(msg, 10, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.CreateCurrencyRequest}
 */
proto.base.CreateCurrencyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.CreateCurrencyRequest;
  return proto.base.CreateCurrencyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.CreateCurrencyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.CreateCurrencyRequest}
 */
proto.base.CreateCurrencyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPosition(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyUnitLabel(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencySubunitLabel(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.CreateCurrencyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.CreateCurrencyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.CreateCurrencyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CreateCurrencyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPosition();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getCurrencyUnitLabel();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCurrencySubunitLabel();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.base.CreateCurrencyRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.base.CreateCurrencyRequest.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string create_date = 3;
 * @return {string}
 */
proto.base.CreateCurrencyRequest.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string write_date = 4;
 * @return {string}
 */
proto.base.CreateCurrencyRequest.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 create_uid = 5;
 * @return {number}
 */
proto.base.CreateCurrencyRequest.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 write_uid = 6;
 * @return {number}
 */
proto.base.CreateCurrencyRequest.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string full_name = 7;
 * @return {string}
 */
proto.base.CreateCurrencyRequest.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool position = 8;
 * @return {boolean}
 */
proto.base.CreateCurrencyRequest.prototype.getPosition = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setPosition = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string currency_unit_label = 9;
 * @return {string}
 */
proto.base.CreateCurrencyRequest.prototype.getCurrencyUnitLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setCurrencyUnitLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string currency_subunit_label = 10;
 * @return {string}
 */
proto.base.CreateCurrencyRequest.prototype.getCurrencySubunitLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setCurrencySubunitLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool active = 11;
 * @return {boolean}
 */
proto.base.CreateCurrencyRequest.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.base.CreateCurrencyRequest} returns this
 */
proto.base.CreateCurrencyRequest.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.CreateCurrencyRateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.base.CreateCurrencyRateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.CreateCurrencyRateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CreateCurrencyRateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currencyId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateCurrencyRate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rate: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    writeDate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.CreateCurrencyRateRequest}
 */
proto.base.CreateCurrencyRateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.CreateCurrencyRateRequest;
  return proto.base.CreateCurrencyRateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.CreateCurrencyRateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.CreateCurrencyRateRequest}
 */
proto.base.CreateCurrencyRateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrencyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateCurrencyRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.CreateCurrencyRateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.CreateCurrencyRateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.CreateCurrencyRateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CreateCurrencyRateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrencyId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDateCurrencyRate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRate();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int32 currency_id = 1;
 * @return {number}
 */
proto.base.CreateCurrencyRateRequest.prototype.getCurrencyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CreateCurrencyRateRequest} returns this
 */
proto.base.CreateCurrencyRateRequest.prototype.setCurrencyId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string date_currency_rate = 2;
 * @return {string}
 */
proto.base.CreateCurrencyRateRequest.prototype.getDateCurrencyRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRateRequest} returns this
 */
proto.base.CreateCurrencyRateRequest.prototype.setDateCurrencyRate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float rate = 3;
 * @return {number}
 */
proto.base.CreateCurrencyRateRequest.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.base.CreateCurrencyRateRequest} returns this
 */
proto.base.CreateCurrencyRateRequest.prototype.setRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string write_date = 4;
 * @return {string}
 */
proto.base.CreateCurrencyRateRequest.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRateRequest} returns this
 */
proto.base.CreateCurrencyRateRequest.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string create_date = 5;
 * @return {string}
 */
proto.base.CreateCurrencyRateRequest.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.base.CreateCurrencyRateRequest} returns this
 */
proto.base.CreateCurrencyRateRequest.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 create_uid = 6;
 * @return {number}
 */
proto.base.CreateCurrencyRateRequest.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CreateCurrencyRateRequest} returns this
 */
proto.base.CreateCurrencyRateRequest.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 write_uid = 7;
 * @return {number}
 */
proto.base.CreateCurrencyRateRequest.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.base.CreateCurrencyRateRequest} returns this
 */
proto.base.CreateCurrencyRateRequest.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.base.CreateCurrencyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.base.CreateCurrencyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.base.CreateCurrencyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CreateCurrencyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    currency: (f = msg.getCurrency()) && proto.base.CreateCurrencyRequest.toObject(includeInstance, f),
    messagesMap: (f = msg.getMessagesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.base.CreateCurrencyResponse}
 */
proto.base.CreateCurrencyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.base.CreateCurrencyResponse;
  return proto.base.CreateCurrencyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.base.CreateCurrencyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.base.CreateCurrencyResponse}
 */
proto.base.CreateCurrencyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.base.CreateCurrencyRequest;
      reader.readMessage(value,proto.base.CreateCurrencyRequest.deserializeBinaryFromReader);
      msg.setCurrency(value);
      break;
    case 2:
      var value = msg.getMessagesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.base.CreateCurrencyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.base.CreateCurrencyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.base.CreateCurrencyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.base.CreateCurrencyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrency();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.base.CreateCurrencyRequest.serializeBinaryToWriter
    );
  }
  f = message.getMessagesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional CreateCurrencyRequest currency = 1;
 * @return {?proto.base.CreateCurrencyRequest}
 */
proto.base.CreateCurrencyResponse.prototype.getCurrency = function() {
  return /** @type{?proto.base.CreateCurrencyRequest} */ (
    jspb.Message.getWrapperField(this, proto.base.CreateCurrencyRequest, 1));
};


/**
 * @param {?proto.base.CreateCurrencyRequest|undefined} value
 * @return {!proto.base.CreateCurrencyResponse} returns this
*/
proto.base.CreateCurrencyResponse.prototype.setCurrency = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.base.CreateCurrencyResponse} returns this
 */
proto.base.CreateCurrencyResponse.prototype.clearCurrency = function() {
  return this.setCurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.base.CreateCurrencyResponse.prototype.hasCurrency = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, string> messages = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.base.CreateCurrencyResponse.prototype.getMessagesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.base.CreateCurrencyResponse} returns this
 */
proto.base.CreateCurrencyResponse.prototype.clearMessagesMap = function() {
  this.getMessagesMap().clear();
  return this;};


goog.object.extend(exports, proto.base);
