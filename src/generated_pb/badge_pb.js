// source: badge.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.badge.BadgeErrorResponse', null, global);
goog.exportSymbol('proto.badge.BadgeQuery', null, global);
goog.exportSymbol('proto.badge.BadgeRequest', null, global);
goog.exportSymbol('proto.badge.BadgeResponse', null, global);
goog.exportSymbol('proto.badge.BadgeType', null, global);
goog.exportSymbol('proto.badge.CreateBadgeRequest', null, global);
goog.exportSymbol('proto.badge.CreateBadgeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.badge.CreateBadgeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.badge.CreateBadgeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.badge.CreateBadgeRequest.displayName = 'proto.badge.CreateBadgeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.badge.CreateBadgeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.badge.CreateBadgeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.badge.CreateBadgeResponse.displayName = 'proto.badge.CreateBadgeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.badge.BadgeQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.badge.BadgeQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.badge.BadgeQuery.displayName = 'proto.badge.BadgeQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.badge.BadgeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.badge.BadgeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.badge.BadgeResponse.displayName = 'proto.badge.BadgeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.badge.BadgeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.badge.BadgeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.badge.BadgeRequest.displayName = 'proto.badge.BadgeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.badge.BadgeErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.badge.BadgeErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.badge.BadgeErrorResponse.displayName = 'proto.badge.BadgeErrorResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.badge.CreateBadgeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.badge.CreateBadgeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.badge.CreateBadgeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.CreateBadgeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    partnerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    partnerName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    eventName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    company: jspb.Message.getFieldWithDefault(msg, 8, ""),
    door: jspb.Message.getFieldWithDefault(msg, 9, ""),
    zone1: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    zone2: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    zone3: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    zone4: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    zone5: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    zone6: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    licencePlate: jspb.Message.getFieldWithDefault(msg, 16, ""),
    email: jspb.Message.getFieldWithDefault(msg, 17, ""),
    jobTitle: jspb.Message.getFieldWithDefault(msg, 18, ""),
    color: jspb.Message.getFieldWithDefault(msg, 19, ""),
    plannerId: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.badge.CreateBadgeRequest}
 */
proto.badge.CreateBadgeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.badge.CreateBadgeRequest;
  return proto.badge.CreateBadgeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.badge.CreateBadgeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.badge.CreateBadgeRequest}
 */
proto.badge.CreateBadgeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.badge.BadgeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartnerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnerName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoor(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone1(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone2(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone3(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone4(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone5(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone6(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicencePlate(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobTitle(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlannerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.badge.CreateBadgeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.badge.CreateBadgeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.badge.CreateBadgeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.CreateBadgeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPartnerId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPartnerName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDoor();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getZone1();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getZone2();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getZone3();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getZone4();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getZone5();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getZone6();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getLicencePlate();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getJobTitle();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getPlannerId();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
};


/**
 * optional BadgeType type = 1;
 * @return {!proto.badge.BadgeType}
 */
proto.badge.CreateBadgeRequest.prototype.getType = function() {
  return /** @type {!proto.badge.BadgeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.badge.BadgeType} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 partner_id = 2;
 * @return {number}
 */
proto.badge.CreateBadgeRequest.prototype.getPartnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setPartnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string partner_name = 3;
 * @return {string}
 */
proto.badge.CreateBadgeRequest.prototype.getPartnerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setPartnerName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 event_id = 4;
 * @return {number}
 */
proto.badge.CreateBadgeRequest.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string event_name = 5;
 * @return {string}
 */
proto.badge.CreateBadgeRequest.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 create_uid = 6;
 * @return {number}
 */
proto.badge.CreateBadgeRequest.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 write_uid = 7;
 * @return {number}
 */
proto.badge.CreateBadgeRequest.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string company = 8;
 * @return {string}
 */
proto.badge.CreateBadgeRequest.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setCompany = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string door = 9;
 * @return {string}
 */
proto.badge.CreateBadgeRequest.prototype.getDoor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setDoor = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool zone1 = 10;
 * @return {boolean}
 */
proto.badge.CreateBadgeRequest.prototype.getZone1 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setZone1 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool zone2 = 11;
 * @return {boolean}
 */
proto.badge.CreateBadgeRequest.prototype.getZone2 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setZone2 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool zone3 = 12;
 * @return {boolean}
 */
proto.badge.CreateBadgeRequest.prototype.getZone3 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setZone3 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool zone4 = 13;
 * @return {boolean}
 */
proto.badge.CreateBadgeRequest.prototype.getZone4 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setZone4 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool zone5 = 14;
 * @return {boolean}
 */
proto.badge.CreateBadgeRequest.prototype.getZone5 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setZone5 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool zone6 = 15;
 * @return {boolean}
 */
proto.badge.CreateBadgeRequest.prototype.getZone6 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setZone6 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string licence_plate = 16;
 * @return {string}
 */
proto.badge.CreateBadgeRequest.prototype.getLicencePlate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setLicencePlate = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string email = 17;
 * @return {string}
 */
proto.badge.CreateBadgeRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string job_title = 18;
 * @return {string}
 */
proto.badge.CreateBadgeRequest.prototype.getJobTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setJobTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string color = 19;
 * @return {string}
 */
proto.badge.CreateBadgeRequest.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional int32 planner_id = 20;
 * @return {number}
 */
proto.badge.CreateBadgeRequest.prototype.getPlannerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.CreateBadgeRequest} returns this
 */
proto.badge.CreateBadgeRequest.prototype.setPlannerId = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.badge.CreateBadgeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.badge.CreateBadgeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.badge.CreateBadgeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.CreateBadgeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.badge.CreateBadgeResponse}
 */
proto.badge.CreateBadgeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.badge.CreateBadgeResponse;
  return proto.badge.CreateBadgeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.badge.CreateBadgeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.badge.CreateBadgeResponse}
 */
proto.badge.CreateBadgeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.badge.CreateBadgeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.badge.CreateBadgeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.badge.CreateBadgeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.CreateBadgeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.badge.CreateBadgeResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.CreateBadgeResponse} returns this
 */
proto.badge.CreateBadgeResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.badge.BadgeQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.badge.BadgeQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.badge.BadgeQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.BadgeQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.badge.BadgeQuery}
 */
proto.badge.BadgeQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.badge.BadgeQuery;
  return proto.badge.BadgeQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.badge.BadgeQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.badge.BadgeQuery}
 */
proto.badge.BadgeQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFieldValue(value);
      break;
    case 3:
      var value = /** @type {!proto.badge.BadgeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.badge.BadgeQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.badge.BadgeQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.badge.BadgeQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.BadgeQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.badge.BadgeQuery.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeQuery} returns this
 */
proto.badge.BadgeQuery.prototype.setFieldName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 field_value = 2;
 * @return {number}
 */
proto.badge.BadgeQuery.prototype.getFieldValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.BadgeQuery} returns this
 */
proto.badge.BadgeQuery.prototype.setFieldValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional BadgeType type = 3;
 * @return {!proto.badge.BadgeType}
 */
proto.badge.BadgeQuery.prototype.getType = function() {
  return /** @type {!proto.badge.BadgeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.badge.BadgeType} value
 * @return {!proto.badge.BadgeQuery} returns this
 */
proto.badge.BadgeQuery.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.badge.BadgeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.badge.BadgeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.badge.BadgeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.BadgeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    partnerName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    eventName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    writeDate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    company: jspb.Message.getFieldWithDefault(msg, 10, ""),
    door: jspb.Message.getFieldWithDefault(msg, 11, ""),
    zone1: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    zone2: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    zone3: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    zone4: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    zone5: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    zone6: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    licencePlate: jspb.Message.getFieldWithDefault(msg, 18, ""),
    email: jspb.Message.getFieldWithDefault(msg, 19, ""),
    jobTitle: jspb.Message.getFieldWithDefault(msg, 20, ""),
    color: jspb.Message.getFieldWithDefault(msg, 21, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.badge.BadgeResponse}
 */
proto.badge.BadgeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.badge.BadgeResponse;
  return proto.badge.BadgeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.badge.BadgeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.badge.BadgeResponse}
 */
proto.badge.BadgeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartnerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnerName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoor(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone1(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone2(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone3(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone4(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone5(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone6(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicencePlate(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobTitle(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.badge.BadgeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.badge.BadgeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.badge.BadgeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.BadgeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnerId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPartnerName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDoor();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getZone1();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getZone2();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getZone3();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getZone4();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getZone5();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getZone6();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getLicencePlate();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getJobTitle();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
};


/**
 * optional string _id = 1;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 partner_id = 2;
 * @return {number}
 */
proto.badge.BadgeResponse.prototype.getPartnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setPartnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string partner_name = 3;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getPartnerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setPartnerName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 event_id = 4;
 * @return {number}
 */
proto.badge.BadgeResponse.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string event_name = 5;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string create_date = 6;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string write_date = 7;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 create_uid = 8;
 * @return {number}
 */
proto.badge.BadgeResponse.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 write_uid = 9;
 * @return {number}
 */
proto.badge.BadgeResponse.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string company = 10;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setCompany = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string door = 11;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getDoor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setDoor = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool zone1 = 12;
 * @return {boolean}
 */
proto.badge.BadgeResponse.prototype.getZone1 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setZone1 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool zone2 = 13;
 * @return {boolean}
 */
proto.badge.BadgeResponse.prototype.getZone2 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setZone2 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool zone3 = 14;
 * @return {boolean}
 */
proto.badge.BadgeResponse.prototype.getZone3 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setZone3 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool zone4 = 15;
 * @return {boolean}
 */
proto.badge.BadgeResponse.prototype.getZone4 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setZone4 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool zone5 = 16;
 * @return {boolean}
 */
proto.badge.BadgeResponse.prototype.getZone5 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setZone5 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool zone6 = 17;
 * @return {boolean}
 */
proto.badge.BadgeResponse.prototype.getZone6 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setZone6 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional string licence_plate = 18;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getLicencePlate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setLicencePlate = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string email = 19;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string job_title = 20;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getJobTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setJobTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string color = 21;
 * @return {string}
 */
proto.badge.BadgeResponse.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeResponse} returns this
 */
proto.badge.BadgeResponse.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.badge.BadgeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.badge.BadgeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.badge.BadgeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.BadgeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.badge.BadgeRequest}
 */
proto.badge.BadgeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.badge.BadgeRequest;
  return proto.badge.BadgeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.badge.BadgeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.badge.BadgeRequest}
 */
proto.badge.BadgeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.badge.BadgeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.badge.BadgeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.badge.BadgeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.badge.BadgeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.BadgeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string _id = 1;
 * @return {string}
 */
proto.badge.BadgeRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeRequest} returns this
 */
proto.badge.BadgeRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BadgeType type = 2;
 * @return {!proto.badge.BadgeType}
 */
proto.badge.BadgeRequest.prototype.getType = function() {
  return /** @type {!proto.badge.BadgeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.badge.BadgeType} value
 * @return {!proto.badge.BadgeRequest} returns this
 */
proto.badge.BadgeRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.badge.BadgeErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.badge.BadgeErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.badge.BadgeErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.BadgeErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorMessage: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.badge.BadgeErrorResponse}
 */
proto.badge.BadgeErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.badge.BadgeErrorResponse;
  return proto.badge.BadgeErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.badge.BadgeErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.badge.BadgeErrorResponse}
 */
proto.badge.BadgeErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.badge.BadgeErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.badge.BadgeErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.badge.BadgeErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.badge.BadgeErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error_message = 1;
 * @return {string}
 */
proto.badge.BadgeErrorResponse.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.badge.BadgeErrorResponse} returns this
 */
proto.badge.BadgeErrorResponse.prototype.setErrorMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.badge.BadgeType = {
  BADGE: 0,
  CAR_PASS: 1
};

goog.object.extend(exports, proto.badge);
