// source: ticket.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.ticket.BadgeResponse', null, global);
goog.exportSymbol('proto.ticket.CreateOrderTicketResponse', null, global);
goog.exportSymbol('proto.ticket.CreateTicketRequest', null, global);
goog.exportSymbol('proto.ticket.CreateTicketResponse', null, global);
goog.exportSymbol('proto.ticket.EntryRequest', null, global);
goog.exportSymbol('proto.ticket.EntryResponse', null, global);
goog.exportSymbol('proto.ticket.EntryResponse.EntryCase', null, global);
goog.exportSymbol('proto.ticket.NumberOfTicketsRequest', null, global);
goog.exportSymbol('proto.ticket.NumberOfTicketsResponse', null, global);
goog.exportSymbol('proto.ticket.Order', null, global);
goog.exportSymbol('proto.ticket.TicketIdRequest', null, global);
goog.exportSymbol('proto.ticket.TicketModel', null, global);
goog.exportSymbol('proto.ticket.TicketPdfRequest', null, global);
goog.exportSymbol('proto.ticket.TicketPdfResponse', null, global);
goog.exportSymbol('proto.ticket.TicketQuery', null, global);
goog.exportSymbol('proto.ticket.TicketQueryGeneric', null, global);
goog.exportSymbol('proto.ticket.TicketResponse', null, global);
goog.exportSymbol('proto.ticket.TicketlistQuery', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.TicketQueryGeneric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.TicketQueryGeneric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.TicketQueryGeneric.displayName = 'proto.ticket.TicketQueryGeneric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.TicketPdfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.TicketPdfRequest.repeatedFields_, null);
};
goog.inherits(proto.ticket.TicketPdfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.TicketPdfRequest.displayName = 'proto.ticket.TicketPdfRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.TicketPdfResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.TicketPdfResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.TicketPdfResponse.displayName = 'proto.ticket.TicketPdfResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.CreateTicketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.CreateTicketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.CreateTicketRequest.displayName = 'proto.ticket.CreateTicketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.CreateTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.CreateTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.CreateTicketResponse.displayName = 'proto.ticket.CreateTicketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.TicketQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.TicketQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.TicketQuery.displayName = 'proto.ticket.TicketQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.TicketlistQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.TicketlistQuery.repeatedFields_, null);
};
goog.inherits(proto.ticket.TicketlistQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.TicketlistQuery.displayName = 'proto.ticket.TicketlistQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.TicketIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.TicketIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.TicketIdRequest.displayName = 'proto.ticket.TicketIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.TicketModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.TicketModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.TicketModel.displayName = 'proto.ticket.TicketModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.TicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ticket.TicketResponse.repeatedFields_, null);
};
goog.inherits(proto.ticket.TicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.TicketResponse.displayName = 'proto.ticket.TicketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.NumberOfTicketsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.NumberOfTicketsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.NumberOfTicketsRequest.displayName = 'proto.ticket.NumberOfTicketsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.NumberOfTicketsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.NumberOfTicketsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.NumberOfTicketsResponse.displayName = 'proto.ticket.NumberOfTicketsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.EntryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.EntryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.EntryRequest.displayName = 'proto.ticket.EntryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.EntryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ticket.EntryResponse.oneofGroups_);
};
goog.inherits(proto.ticket.EntryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.EntryResponse.displayName = 'proto.ticket.EntryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.BadgeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.BadgeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.BadgeResponse.displayName = 'proto.ticket.BadgeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.Order.displayName = 'proto.ticket.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ticket.CreateOrderTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ticket.CreateOrderTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ticket.CreateOrderTicketResponse.displayName = 'proto.ticket.CreateOrderTicketResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.TicketQueryGeneric.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.TicketQueryGeneric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.TicketQueryGeneric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketQueryGeneric.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersMap: (f = msg.getFiltersMap()) ? f.toObject(includeInstance, undefined) : [],
    page: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageSize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.TicketQueryGeneric}
 */
proto.ticket.TicketQueryGeneric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.TicketQueryGeneric;
  return proto.ticket.TicketQueryGeneric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.TicketQueryGeneric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.TicketQueryGeneric}
 */
proto.ticket.TicketQueryGeneric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFiltersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.TicketQueryGeneric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.TicketQueryGeneric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.TicketQueryGeneric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketQueryGeneric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * map<string, string> filters = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ticket.TicketQueryGeneric.prototype.getFiltersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ticket.TicketQueryGeneric} returns this
 */
proto.ticket.TicketQueryGeneric.prototype.clearFiltersMap = function() {
  this.getFiltersMap().clear();
  return this;};


/**
 * optional int32 page = 2;
 * @return {number}
 */
proto.ticket.TicketQueryGeneric.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketQueryGeneric} returns this
 */
proto.ticket.TicketQueryGeneric.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 page_size = 3;
 * @return {number}
 */
proto.ticket.TicketQueryGeneric.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketQueryGeneric} returns this
 */
proto.ticket.TicketQueryGeneric.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.TicketPdfRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.TicketPdfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.TicketPdfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.TicketPdfRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketPdfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketsIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    orderId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.TicketPdfRequest}
 */
proto.ticket.TicketPdfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.TicketPdfRequest;
  return proto.ticket.TicketPdfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.TicketPdfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.TicketPdfRequest}
 */
proto.ticket.TicketPdfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTicketsIds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.TicketPdfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.TicketPdfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.TicketPdfRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketPdfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketsIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated string tickets_ids = 1;
 * @return {!Array<string>}
 */
proto.ticket.TicketPdfRequest.prototype.getTicketsIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ticket.TicketPdfRequest} returns this
 */
proto.ticket.TicketPdfRequest.prototype.setTicketsIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ticket.TicketPdfRequest} returns this
 */
proto.ticket.TicketPdfRequest.prototype.addTicketsIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.TicketPdfRequest} returns this
 */
proto.ticket.TicketPdfRequest.prototype.clearTicketsIdsList = function() {
  return this.setTicketsIdsList([]);
};


/**
 * optional int32 order_id = 2;
 * @return {number}
 */
proto.ticket.TicketPdfRequest.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketPdfRequest} returns this
 */
proto.ticket.TicketPdfRequest.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.TicketPdfResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.TicketPdfResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.TicketPdfResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketPdfResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pdf: msg.getPdf_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.TicketPdfResponse}
 */
proto.ticket.TicketPdfResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.TicketPdfResponse;
  return proto.ticket.TicketPdfResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.TicketPdfResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.TicketPdfResponse}
 */
proto.ticket.TicketPdfResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPdf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.TicketPdfResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.TicketPdfResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.TicketPdfResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketPdfResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPdf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes pdf = 1;
 * @return {string}
 */
proto.ticket.TicketPdfResponse.prototype.getPdf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pdf = 1;
 * This is a type-conversion wrapper around `getPdf()`
 * @return {string}
 */
proto.ticket.TicketPdfResponse.prototype.getPdf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPdf()));
};


/**
 * optional bytes pdf = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPdf()`
 * @return {!Uint8Array}
 */
proto.ticket.TicketPdfResponse.prototype.getPdf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPdf()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ticket.TicketPdfResponse} returns this
 */
proto.ticket.TicketPdfResponse.prototype.setPdf = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.CreateTicketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.CreateTicketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.CreateTicketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.CreateTicketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    partnerName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    eventName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ticketTypeId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ticketTypeName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sold: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    preprint: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    createUid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 10, 0),
    orderLineId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 12, 0),
    section: jspb.Message.getFieldWithDefault(msg, 13, ""),
    place: jspb.Message.getFieldWithDefault(msg, 14, ""),
    isAdmission: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    door: jspb.Message.getFieldWithDefault(msg, 16, ""),
    soldDate: jspb.Message.getFieldWithDefault(msg, 17, ""),
    visitingDate: jspb.Message.getFieldWithDefault(msg, 18, ""),
    checked: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    randomCodeOrder: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.CreateTicketRequest}
 */
proto.ticket.CreateTicketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.CreateTicketRequest;
  return proto.ticket.CreateTicketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.CreateTicketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.CreateTicketRequest}
 */
proto.ticket.CreateTicketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartnerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnerName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketTypeId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketTypeName(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSold(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreprint(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrderLineId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrderId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setSection(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlace(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAdmission(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoor(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoldDate(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisitingDate(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChecked(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setRandomCodeOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.CreateTicketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.CreateTicketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.CreateTicketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.CreateTicketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPartnerName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTicketTypeId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTicketTypeName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSold();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPreprint();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getOrderLineId();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getSection();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPlace();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getIsAdmission();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getDoor();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getSoldDate();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getVisitingDate();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getChecked();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getRandomCodeOrder();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional int32 partner_id = 1;
 * @return {number}
 */
proto.ticket.CreateTicketRequest.prototype.getPartnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setPartnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string partner_name = 2;
 * @return {string}
 */
proto.ticket.CreateTicketRequest.prototype.getPartnerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setPartnerName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 event_id = 3;
 * @return {number}
 */
proto.ticket.CreateTicketRequest.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string event_name = 4;
 * @return {string}
 */
proto.ticket.CreateTicketRequest.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 ticket_type_id = 5;
 * @return {number}
 */
proto.ticket.CreateTicketRequest.prototype.getTicketTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setTicketTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string ticket_type_name = 6;
 * @return {string}
 */
proto.ticket.CreateTicketRequest.prototype.getTicketTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setTicketTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool sold = 7;
 * @return {boolean}
 */
proto.ticket.CreateTicketRequest.prototype.getSold = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setSold = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool preprint = 8;
 * @return {boolean}
 */
proto.ticket.CreateTicketRequest.prototype.getPreprint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setPreprint = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 create_uid = 9;
 * @return {number}
 */
proto.ticket.CreateTicketRequest.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 write_uid = 10;
 * @return {number}
 */
proto.ticket.CreateTicketRequest.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 order_line_id = 11;
 * @return {number}
 */
proto.ticket.CreateTicketRequest.prototype.getOrderLineId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setOrderLineId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 order_id = 12;
 * @return {number}
 */
proto.ticket.CreateTicketRequest.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string section = 13;
 * @return {string}
 */
proto.ticket.CreateTicketRequest.prototype.getSection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setSection = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string place = 14;
 * @return {string}
 */
proto.ticket.CreateTicketRequest.prototype.getPlace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setPlace = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool is_admission = 15;
 * @return {boolean}
 */
proto.ticket.CreateTicketRequest.prototype.getIsAdmission = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setIsAdmission = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string door = 16;
 * @return {string}
 */
proto.ticket.CreateTicketRequest.prototype.getDoor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setDoor = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string sold_date = 17;
 * @return {string}
 */
proto.ticket.CreateTicketRequest.prototype.getSoldDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setSoldDate = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string visiting_date = 18;
 * @return {string}
 */
proto.ticket.CreateTicketRequest.prototype.getVisitingDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setVisitingDate = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional bool checked = 19;
 * @return {boolean}
 */
proto.ticket.CreateTicketRequest.prototype.getChecked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setChecked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional string random_code_order = 20;
 * @return {string}
 */
proto.ticket.CreateTicketRequest.prototype.getRandomCodeOrder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketRequest} returns this
 */
proto.ticket.CreateTicketRequest.prototype.setRandomCodeOrder = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.CreateTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.CreateTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.CreateTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.CreateTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.CreateTicketResponse}
 */
proto.ticket.CreateTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.CreateTicketResponse;
  return proto.ticket.CreateTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.CreateTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.CreateTicketResponse}
 */
proto.ticket.CreateTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.CreateTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.CreateTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.CreateTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.CreateTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.CreateTicketResponse.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateTicketResponse} returns this
 */
proto.ticket.CreateTicketResponse.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.TicketQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.TicketQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.TicketQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldValue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.TicketQuery}
 */
proto.ticket.TicketQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.TicketQuery;
  return proto.ticket.TicketQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.TicketQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.TicketQuery}
 */
proto.ticket.TicketQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFieldValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.TicketQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.TicketQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.TicketQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.ticket.TicketQuery.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketQuery} returns this
 */
proto.ticket.TicketQuery.prototype.setFieldName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 field_value = 2;
 * @return {number}
 */
proto.ticket.TicketQuery.prototype.getFieldValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketQuery} returns this
 */
proto.ticket.TicketQuery.prototype.setFieldValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.TicketlistQuery.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.TicketlistQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.TicketlistQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.TicketlistQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketlistQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldNamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    fieldValuesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.TicketlistQuery}
 */
proto.ticket.TicketlistQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.TicketlistQuery;
  return proto.ticket.TicketlistQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.TicketlistQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.TicketlistQuery}
 */
proto.ticket.TicketlistQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldNames(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFieldValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.TicketlistQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.TicketlistQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.TicketlistQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketlistQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFieldValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * repeated string field_names = 1;
 * @return {!Array<string>}
 */
proto.ticket.TicketlistQuery.prototype.getFieldNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ticket.TicketlistQuery} returns this
 */
proto.ticket.TicketlistQuery.prototype.setFieldNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ticket.TicketlistQuery} returns this
 */
proto.ticket.TicketlistQuery.prototype.addFieldNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.TicketlistQuery} returns this
 */
proto.ticket.TicketlistQuery.prototype.clearFieldNamesList = function() {
  return this.setFieldNamesList([]);
};


/**
 * repeated int32 field_values = 2;
 * @return {!Array<number>}
 */
proto.ticket.TicketlistQuery.prototype.getFieldValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ticket.TicketlistQuery} returns this
 */
proto.ticket.TicketlistQuery.prototype.setFieldValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ticket.TicketlistQuery} returns this
 */
proto.ticket.TicketlistQuery.prototype.addFieldValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.TicketlistQuery} returns this
 */
proto.ticket.TicketlistQuery.prototype.clearFieldValuesList = function() {
  return this.setFieldValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.TicketIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.TicketIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.TicketIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.TicketIdRequest}
 */
proto.ticket.TicketIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.TicketIdRequest;
  return proto.ticket.TicketIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.TicketIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.TicketIdRequest}
 */
proto.ticket.TicketIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.TicketIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.TicketIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.TicketIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.TicketIdRequest.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketIdRequest} returns this
 */
proto.ticket.TicketIdRequest.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.TicketModel.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.TicketModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.TicketModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    partnerName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    eventName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ticketTypeId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ticketTypeName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    checkDate: jspb.Message.getFieldWithDefault(msg, 9, ""),
    checkDevice: jspb.Message.getFieldWithDefault(msg, 10, ""),
    sold: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    soldDate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    preprint: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    checkUid: jspb.Message.getFieldWithDefault(msg, 14, ""),
    checkUname: jspb.Message.getFieldWithDefault(msg, 15, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 16, ""),
    writeDate: jspb.Message.getFieldWithDefault(msg, 17, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 18, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 19, 0),
    orderLineId: jspb.Message.getFieldWithDefault(msg, 20, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 21, 0),
    section: jspb.Message.getFieldWithDefault(msg, 22, ""),
    place: jspb.Message.getFieldWithDefault(msg, 23, ""),
    isAdmission: jspb.Message.getBooleanFieldWithDefault(msg, 24, false),
    checked: jspb.Message.getBooleanFieldWithDefault(msg, 25, false),
    price: jspb.Message.getFieldWithDefault(msg, 26, 0),
    randomCodeOrder: jspb.Message.getFieldWithDefault(msg, 27, ""),
    buyerName: jspb.Message.getFieldWithDefault(msg, 28, ""),
    buyerPhone: jspb.Message.getFieldWithDefault(msg, 29, ""),
    buyerEmail: jspb.Message.getFieldWithDefault(msg, 30, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.TicketModel}
 */
proto.ticket.TicketModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.TicketModel;
  return proto.ticket.TicketModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.TicketModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.TicketModel}
 */
proto.ticket.TicketModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartnerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnerName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketTypeId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketTypeName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckDate(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckDevice(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSold(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoldDate(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreprint(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckUid(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckUname(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrderLineId(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrderId(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setSection(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlace(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAdmission(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChecked(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrice(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setRandomCodeOrder(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuyerName(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuyerPhone(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuyerEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.TicketModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.TicketModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.TicketModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnerId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPartnerName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTicketTypeId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTicketTypeName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCheckDate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCheckDevice();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSold();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSoldDate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPreprint();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getCheckUid();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getCheckUname();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getOrderLineId();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getSection();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getPlace();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getIsAdmission();
  if (f) {
    writer.writeBool(
      24,
      f
    );
  }
  f = message.getChecked();
  if (f) {
    writer.writeBool(
      25,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getRandomCodeOrder();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getBuyerName();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getBuyerPhone();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getBuyerEmail();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
};


/**
 * optional string ticket_id = 1;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getTicketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setTicketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 partner_id = 2;
 * @return {number}
 */
proto.ticket.TicketModel.prototype.getPartnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setPartnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string partner_name = 3;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getPartnerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setPartnerName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 event_id = 4;
 * @return {number}
 */
proto.ticket.TicketModel.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string event_name = 5;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 ticket_type_id = 6;
 * @return {number}
 */
proto.ticket.TicketModel.prototype.getTicketTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setTicketTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string ticket_type_name = 7;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getTicketTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setTicketTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string check_date = 9;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getCheckDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setCheckDate = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string check_device = 10;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getCheckDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setCheckDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool sold = 11;
 * @return {boolean}
 */
proto.ticket.TicketModel.prototype.getSold = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setSold = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string sold_date = 12;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getSoldDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setSoldDate = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool preprint = 13;
 * @return {boolean}
 */
proto.ticket.TicketModel.prototype.getPreprint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setPreprint = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string check_uid = 14;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getCheckUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setCheckUid = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string check_uname = 15;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getCheckUname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setCheckUname = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string create_date = 16;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string write_date = 17;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int32 create_uid = 18;
 * @return {number}
 */
proto.ticket.TicketModel.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 write_uid = 19;
 * @return {number}
 */
proto.ticket.TicketModel.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 order_line_id = 20;
 * @return {number}
 */
proto.ticket.TicketModel.prototype.getOrderLineId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setOrderLineId = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 order_id = 21;
 * @return {number}
 */
proto.ticket.TicketModel.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional string section = 22;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getSection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setSection = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string place = 23;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getPlace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setPlace = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional bool is_admission = 24;
 * @return {boolean}
 */
proto.ticket.TicketModel.prototype.getIsAdmission = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setIsAdmission = function(value) {
  return jspb.Message.setProto3BooleanField(this, 24, value);
};


/**
 * optional bool checked = 25;
 * @return {boolean}
 */
proto.ticket.TicketModel.prototype.getChecked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setChecked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 25, value);
};


/**
 * optional int32 price = 26;
 * @return {number}
 */
proto.ticket.TicketModel.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional string random_code_order = 27;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getRandomCodeOrder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setRandomCodeOrder = function(value) {
  return jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional string buyer_name = 28;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getBuyerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setBuyerName = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional string buyer_phone = 29;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getBuyerPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setBuyerPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 29, value);
};


/**
 * optional string buyer_email = 30;
 * @return {string}
 */
proto.ticket.TicketModel.prototype.getBuyerEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.TicketModel} returns this
 */
proto.ticket.TicketModel.prototype.setBuyerEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ticket.TicketResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.TicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.TicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.TicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketsList: jspb.Message.toObjectList(msg.getTicketsList(),
    proto.ticket.TicketModel.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.TicketResponse}
 */
proto.ticket.TicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.TicketResponse;
  return proto.ticket.TicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.TicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.TicketResponse}
 */
proto.ticket.TicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.TicketModel;
      reader.readMessage(value,proto.ticket.TicketModel.deserializeBinaryFromReader);
      msg.addTickets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.TicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.TicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.TicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.TicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ticket.TicketModel.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketModel tickets = 1;
 * @return {!Array<!proto.ticket.TicketModel>}
 */
proto.ticket.TicketResponse.prototype.getTicketsList = function() {
  return /** @type{!Array<!proto.ticket.TicketModel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ticket.TicketModel, 1));
};


/**
 * @param {!Array<!proto.ticket.TicketModel>} value
 * @return {!proto.ticket.TicketResponse} returns this
*/
proto.ticket.TicketResponse.prototype.setTicketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ticket.TicketModel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ticket.TicketModel}
 */
proto.ticket.TicketResponse.prototype.addTickets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ticket.TicketModel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ticket.TicketResponse} returns this
 */
proto.ticket.TicketResponse.prototype.clearTicketsList = function() {
  return this.setTicketsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.NumberOfTicketsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.NumberOfTicketsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.NumberOfTicketsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.NumberOfTicketsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketTypeId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.NumberOfTicketsRequest}
 */
proto.ticket.NumberOfTicketsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.NumberOfTicketsRequest;
  return proto.ticket.NumberOfTicketsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.NumberOfTicketsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.NumberOfTicketsRequest}
 */
proto.ticket.NumberOfTicketsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketTypeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.NumberOfTicketsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.NumberOfTicketsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.NumberOfTicketsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.NumberOfTicketsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketTypeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ticket_type_id = 1;
 * @return {number}
 */
proto.ticket.NumberOfTicketsRequest.prototype.getTicketTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.NumberOfTicketsRequest} returns this
 */
proto.ticket.NumberOfTicketsRequest.prototype.setTicketTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.NumberOfTicketsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.NumberOfTicketsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.NumberOfTicketsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.NumberOfTicketsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketTypeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numberOfTickets: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.NumberOfTicketsResponse}
 */
proto.ticket.NumberOfTicketsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.NumberOfTicketsResponse;
  return proto.ticket.NumberOfTicketsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.NumberOfTicketsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.NumberOfTicketsResponse}
 */
proto.ticket.NumberOfTicketsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketTypeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumberOfTickets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.NumberOfTicketsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.NumberOfTicketsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.NumberOfTicketsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.NumberOfTicketsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketTypeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNumberOfTickets();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 ticket_type_id = 1;
 * @return {number}
 */
proto.ticket.NumberOfTicketsResponse.prototype.getTicketTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.NumberOfTicketsResponse} returns this
 */
proto.ticket.NumberOfTicketsResponse.prototype.setTicketTypeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 number_of_tickets = 2;
 * @return {number}
 */
proto.ticket.NumberOfTicketsResponse.prototype.getNumberOfTickets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.NumberOfTicketsResponse} returns this
 */
proto.ticket.NumberOfTicketsResponse.prototype.setNumberOfTickets = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.EntryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.EntryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.EntryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.EntryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    qrCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userAction: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isEntrance: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    checkerId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    checkerName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    device: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.EntryRequest}
 */
proto.ticket.EntryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.EntryRequest;
  return proto.ticket.EntryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.EntryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.EntryRequest}
 */
proto.ticket.EntryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQrCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAction(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEntrance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCheckerId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckerName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.EntryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.EntryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.EntryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.EntryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQrCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUserAction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsEntrance();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCheckerId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCheckerName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string qr_code = 1;
 * @return {string}
 */
proto.ticket.EntryRequest.prototype.getQrCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.EntryRequest} returns this
 */
proto.ticket.EntryRequest.prototype.setQrCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 event_id = 2;
 * @return {number}
 */
proto.ticket.EntryRequest.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.EntryRequest} returns this
 */
proto.ticket.EntryRequest.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string user_action = 3;
 * @return {string}
 */
proto.ticket.EntryRequest.prototype.getUserAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.EntryRequest} returns this
 */
proto.ticket.EntryRequest.prototype.setUserAction = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_entrance = 4;
 * @return {boolean}
 */
proto.ticket.EntryRequest.prototype.getIsEntrance = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.EntryRequest} returns this
 */
proto.ticket.EntryRequest.prototype.setIsEntrance = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 checker_id = 5;
 * @return {number}
 */
proto.ticket.EntryRequest.prototype.getCheckerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.EntryRequest} returns this
 */
proto.ticket.EntryRequest.prototype.setCheckerId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string checker_name = 6;
 * @return {string}
 */
proto.ticket.EntryRequest.prototype.getCheckerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.EntryRequest} returns this
 */
proto.ticket.EntryRequest.prototype.setCheckerName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string device = 7;
 * @return {string}
 */
proto.ticket.EntryRequest.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.EntryRequest} returns this
 */
proto.ticket.EntryRequest.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ticket.EntryResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ticket.EntryResponse.EntryCase = {
  ENTRY_NOT_SET: 0,
  TICKET: 1,
  BADGE: 2
};

/**
 * @return {proto.ticket.EntryResponse.EntryCase}
 */
proto.ticket.EntryResponse.prototype.getEntryCase = function() {
  return /** @type {proto.ticket.EntryResponse.EntryCase} */(jspb.Message.computeOneofCase(this, proto.ticket.EntryResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.EntryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.EntryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.EntryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.EntryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: (f = msg.getTicket()) && proto.ticket.TicketModel.toObject(includeInstance, f),
    badge: (f = msg.getBadge()) && proto.ticket.BadgeResponse.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.EntryResponse}
 */
proto.ticket.EntryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.EntryResponse;
  return proto.ticket.EntryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.EntryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.EntryResponse}
 */
proto.ticket.EntryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ticket.TicketModel;
      reader.readMessage(value,proto.ticket.TicketModel.deserializeBinaryFromReader);
      msg.setTicket(value);
      break;
    case 2:
      var value = new proto.ticket.BadgeResponse;
      reader.readMessage(value,proto.ticket.BadgeResponse.deserializeBinaryFromReader);
      msg.setBadge(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.EntryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.EntryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.EntryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.EntryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ticket.TicketModel.serializeBinaryToWriter
    );
  }
  f = message.getBadge();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ticket.BadgeResponse.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional TicketModel ticket = 1;
 * @return {?proto.ticket.TicketModel}
 */
proto.ticket.EntryResponse.prototype.getTicket = function() {
  return /** @type{?proto.ticket.TicketModel} */ (
    jspb.Message.getWrapperField(this, proto.ticket.TicketModel, 1));
};


/**
 * @param {?proto.ticket.TicketModel|undefined} value
 * @return {!proto.ticket.EntryResponse} returns this
*/
proto.ticket.EntryResponse.prototype.setTicket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ticket.EntryResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.EntryResponse} returns this
 */
proto.ticket.EntryResponse.prototype.clearTicket = function() {
  return this.setTicket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.EntryResponse.prototype.hasTicket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BadgeResponse badge = 2;
 * @return {?proto.ticket.BadgeResponse}
 */
proto.ticket.EntryResponse.prototype.getBadge = function() {
  return /** @type{?proto.ticket.BadgeResponse} */ (
    jspb.Message.getWrapperField(this, proto.ticket.BadgeResponse, 2));
};


/**
 * @param {?proto.ticket.BadgeResponse|undefined} value
 * @return {!proto.ticket.EntryResponse} returns this
*/
proto.ticket.EntryResponse.prototype.setBadge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ticket.EntryResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ticket.EntryResponse} returns this
 */
proto.ticket.EntryResponse.prototype.clearBadge = function() {
  return this.setBadge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ticket.EntryResponse.prototype.hasBadge = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ticket.EntryResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.EntryResponse} returns this
 */
proto.ticket.EntryResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 status = 4;
 * @return {number}
 */
proto.ticket.EntryResponse.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.EntryResponse} returns this
 */
proto.ticket.EntryResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.BadgeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.BadgeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.BadgeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.BadgeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partnerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    partnerName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    eventName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    writeDate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    company: jspb.Message.getFieldWithDefault(msg, 10, ""),
    door: jspb.Message.getFieldWithDefault(msg, 11, ""),
    zone1: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    zone2: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    zone3: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    zone4: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    zone5: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    zone6: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    licencePlate: jspb.Message.getFieldWithDefault(msg, 18, ""),
    email: jspb.Message.getFieldWithDefault(msg, 19, ""),
    jobTitle: jspb.Message.getFieldWithDefault(msg, 20, ""),
    color: jspb.Message.getFieldWithDefault(msg, 21, ""),
    checked: jspb.Message.getBooleanFieldWithDefault(msg, 22, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.BadgeResponse}
 */
proto.ticket.BadgeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.BadgeResponse;
  return proto.ticket.BadgeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.BadgeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.BadgeResponse}
 */
proto.ticket.BadgeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartnerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnerName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoor(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone1(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone2(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone3(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone4(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone5(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZone6(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicencePlate(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobTitle(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChecked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.BadgeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.BadgeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.BadgeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.BadgeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartnerId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPartnerName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDoor();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getZone1();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getZone2();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getZone3();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getZone4();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getZone5();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getZone6();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getLicencePlate();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getJobTitle();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getChecked();
  if (f) {
    writer.writeBool(
      22,
      f
    );
  }
};


/**
 * optional string _id = 1;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 partner_id = 2;
 * @return {number}
 */
proto.ticket.BadgeResponse.prototype.getPartnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setPartnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string partner_name = 3;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getPartnerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setPartnerName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 event_id = 4;
 * @return {number}
 */
proto.ticket.BadgeResponse.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string event_name = 5;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string create_date = 6;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string write_date = 7;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 create_uid = 8;
 * @return {number}
 */
proto.ticket.BadgeResponse.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 write_uid = 9;
 * @return {number}
 */
proto.ticket.BadgeResponse.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string company = 10;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setCompany = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string door = 11;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getDoor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setDoor = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool zone1 = 12;
 * @return {boolean}
 */
proto.ticket.BadgeResponse.prototype.getZone1 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setZone1 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool zone2 = 13;
 * @return {boolean}
 */
proto.ticket.BadgeResponse.prototype.getZone2 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setZone2 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool zone3 = 14;
 * @return {boolean}
 */
proto.ticket.BadgeResponse.prototype.getZone3 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setZone3 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool zone4 = 15;
 * @return {boolean}
 */
proto.ticket.BadgeResponse.prototype.getZone4 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setZone4 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool zone5 = 16;
 * @return {boolean}
 */
proto.ticket.BadgeResponse.prototype.getZone5 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setZone5 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool zone6 = 17;
 * @return {boolean}
 */
proto.ticket.BadgeResponse.prototype.getZone6 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setZone6 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional string licence_plate = 18;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getLicencePlate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setLicencePlate = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string email = 19;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string job_title = 20;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getJobTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setJobTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string color = 21;
 * @return {string}
 */
proto.ticket.BadgeResponse.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional bool checked = 22;
 * @return {boolean}
 */
proto.ticket.BadgeResponse.prototype.getChecked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.BadgeResponse} returns this
 */
proto.ticket.BadgeResponse.prototype.setChecked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 22, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.Order}
 */
proto.ticket.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.Order;
  return proto.ticket.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.Order}
 */
proto.ticket.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 order_id = 1;
 * @return {number}
 */
proto.ticket.Order.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ticket.Order} returns this
 */
proto.ticket.Order.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ticket.CreateOrderTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ticket.CreateOrderTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ticket.CreateOrderTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.CreateOrderTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ticket.CreateOrderTicketResponse}
 */
proto.ticket.CreateOrderTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ticket.CreateOrderTicketResponse;
  return proto.ticket.CreateOrderTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ticket.CreateOrderTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ticket.CreateOrderTicketResponse}
 */
proto.ticket.CreateOrderTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ticket.CreateOrderTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ticket.CreateOrderTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ticket.CreateOrderTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ticket.CreateOrderTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.ticket.CreateOrderTicketResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ticket.CreateOrderTicketResponse} returns this
 */
proto.ticket.CreateOrderTicketResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ticket.CreateOrderTicketResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ticket.CreateOrderTicketResponse} returns this
 */
proto.ticket.CreateOrderTicketResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.ticket);
