// source: event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.event.AllEventCategory', null, global);
goog.exportSymbol('proto.event.AllEventPlace', null, global);
goog.exportSymbol('proto.event.AllEvents', null, global);
goog.exportSymbol('proto.event.AllTagsResponse', null, global);
goog.exportSymbol('proto.event.CreateEventPlaceRequest', null, global);
goog.exportSymbol('proto.event.CreateEventPlaceResponse', null, global);
goog.exportSymbol('proto.event.DeleteEventRequest', null, global);
goog.exportSymbol('proto.event.DeleteEventResponse', null, global);
goog.exportSymbol('proto.event.DetailSeatsRequest', null, global);
goog.exportSymbol('proto.event.DetailSeatsResponse', null, global);
goog.exportSymbol('proto.event.EventPlaceResponse', null, global);
goog.exportSymbol('proto.event.EventsInformations', null, global);
goog.exportSymbol('proto.event.GetEventByPlannerRequest', null, global);
goog.exportSymbol('proto.event.GetEventByPlannerResponse', null, global);
goog.exportSymbol('proto.event.GetEventCategoryRequest', null, global);
goog.exportSymbol('proto.event.GetEventCategoryResponse', null, global);
goog.exportSymbol('proto.event.GetEventListRequest', null, global);
goog.exportSymbol('proto.event.GetEventPlaceRequest', null, global);
goog.exportSymbol('proto.event.GetEventPlaceResponse', null, global);
goog.exportSymbol('proto.event.GetEventRequest', null, global);
goog.exportSymbol('proto.event.GetEventResponse', null, global);
goog.exportSymbol('proto.event.GetEventsByIdsRequest', null, global);
goog.exportSymbol('proto.event.GetTagsRequest', null, global);
goog.exportSymbol('proto.event.GetTagsResponse', null, global);
goog.exportSymbol('proto.event.GetTicketTypeListRequest', null, global);
goog.exportSymbol('proto.event.GetTicketTypeRequest', null, global);
goog.exportSymbol('proto.event.GetTicketTypesResponse', null, global);
goog.exportSymbol('proto.event.GetTurnoverCreatedRequest', null, global);
goog.exportSymbol('proto.event.GetTurnoverCreatedResponse', null, global);
goog.exportSymbol('proto.event.PlaceAvailableRequest', null, global);
goog.exportSymbol('proto.event.PlaceAvailableResponse', null, global);
goog.exportSymbol('proto.event.QueryCalculationRequest', null, global);
goog.exportSymbol('proto.event.QueryCalculationResponse', null, global);
goog.exportSymbol('proto.event.SumTicketRequest', null, global);
goog.exportSymbol('proto.event.SumTicketResponse', null, global);
goog.exportSymbol('proto.event.TicketTypeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.QueryCalculationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.QueryCalculationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.QueryCalculationRequest.displayName = 'proto.event.QueryCalculationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.QueryCalculationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.QueryCalculationResponse.repeatedFields_, null);
};
goog.inherits(proto.event.QueryCalculationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.QueryCalculationResponse.displayName = 'proto.event.QueryCalculationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.PlaceAvailableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.PlaceAvailableRequest.repeatedFields_, null);
};
goog.inherits(proto.event.PlaceAvailableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.PlaceAvailableRequest.displayName = 'proto.event.PlaceAvailableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.PlaceAvailableResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.PlaceAvailableResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.PlaceAvailableResponse.displayName = 'proto.event.PlaceAvailableResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.GetEventListRequest.repeatedFields_, null);
};
goog.inherits(proto.event.GetEventListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventListRequest.displayName = 'proto.event.GetEventListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetTicketTypeListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.GetTicketTypeListRequest.repeatedFields_, null);
};
goog.inherits(proto.event.GetTicketTypeListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetTicketTypeListRequest.displayName = 'proto.event.GetTicketTypeListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.GetEventRequest.repeatedFields_, null);
};
goog.inherits(proto.event.GetEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventRequest.displayName = 'proto.event.GetEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.GetEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventResponse.displayName = 'proto.event.GetEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventCategoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.GetEventCategoryRequest.repeatedFields_, null);
};
goog.inherits(proto.event.GetEventCategoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventCategoryRequest.displayName = 'proto.event.GetEventCategoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventCategoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.GetEventCategoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventCategoryResponse.displayName = 'proto.event.GetEventCategoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.AllEventCategory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.AllEventCategory.repeatedFields_, null);
};
goog.inherits(proto.event.AllEventCategory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.AllEventCategory.displayName = 'proto.event.AllEventCategory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.AllEvents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.AllEvents.repeatedFields_, null);
};
goog.inherits(proto.event.AllEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.AllEvents.displayName = 'proto.event.AllEvents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.EventsInformations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.EventsInformations.repeatedFields_, null);
};
goog.inherits(proto.event.EventsInformations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.EventsInformations.displayName = 'proto.event.EventsInformations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.DeleteEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.DeleteEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.DeleteEventRequest.displayName = 'proto.event.DeleteEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.DeleteEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.DeleteEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.DeleteEventResponse.displayName = 'proto.event.DeleteEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetTicketTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.GetTicketTypeRequest.repeatedFields_, null);
};
goog.inherits(proto.event.GetTicketTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetTicketTypeRequest.displayName = 'proto.event.GetTicketTypeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.TicketTypeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.TicketTypeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.TicketTypeResponse.displayName = 'proto.event.TicketTypeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetTicketTypesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.GetTicketTypesResponse.repeatedFields_, null);
};
goog.inherits(proto.event.GetTicketTypesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetTicketTypesResponse.displayName = 'proto.event.GetTicketTypesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventsByIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.GetEventsByIdsRequest.repeatedFields_, null);
};
goog.inherits(proto.event.GetEventsByIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventsByIdsRequest.displayName = 'proto.event.GetEventsByIdsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventPlaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.GetEventPlaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventPlaceResponse.displayName = 'proto.event.GetEventPlaceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetTagsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.GetTagsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetTagsRequest.displayName = 'proto.event.GetTagsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetTagsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.GetTagsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetTagsResponse.displayName = 'proto.event.GetTagsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.AllTagsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.AllTagsResponse.repeatedFields_, null);
};
goog.inherits(proto.event.AllTagsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.AllTagsResponse.displayName = 'proto.event.AllTagsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CreateEventPlaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CreateEventPlaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CreateEventPlaceRequest.displayName = 'proto.event.CreateEventPlaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.CreateEventPlaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.CreateEventPlaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.CreateEventPlaceResponse.displayName = 'proto.event.CreateEventPlaceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventPlaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.GetEventPlaceRequest.repeatedFields_, null);
};
goog.inherits(proto.event.GetEventPlaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventPlaceRequest.displayName = 'proto.event.GetEventPlaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.AllEventPlace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.AllEventPlace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.AllEventPlace.displayName = 'proto.event.AllEventPlace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.EventPlaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.EventPlaceResponse.repeatedFields_, null);
};
goog.inherits(proto.event.EventPlaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.EventPlaceResponse.displayName = 'proto.event.EventPlaceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.DetailSeatsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.DetailSeatsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.DetailSeatsRequest.displayName = 'proto.event.DetailSeatsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.DetailSeatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.DetailSeatsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.DetailSeatsResponse.displayName = 'proto.event.DetailSeatsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.SumTicketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.SumTicketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.SumTicketRequest.displayName = 'proto.event.SumTicketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.SumTicketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.SumTicketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.SumTicketResponse.displayName = 'proto.event.SumTicketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventByPlannerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.GetEventByPlannerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventByPlannerRequest.displayName = 'proto.event.GetEventByPlannerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetEventByPlannerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.event.GetEventByPlannerResponse.repeatedFields_, null);
};
goog.inherits(proto.event.GetEventByPlannerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetEventByPlannerResponse.displayName = 'proto.event.GetEventByPlannerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetTurnoverCreatedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.GetTurnoverCreatedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetTurnoverCreatedRequest.displayName = 'proto.event.GetTurnoverCreatedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.event.GetTurnoverCreatedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.event.GetTurnoverCreatedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.event.GetTurnoverCreatedResponse.displayName = 'proto.event.GetTurnoverCreatedResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.QueryCalculationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.QueryCalculationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.QueryCalculationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.QueryCalculationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, ""),
    alias: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    condition: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.QueryCalculationRequest}
 */
proto.event.QueryCalculationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.QueryCalculationRequest;
  return proto.event.QueryCalculationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.QueryCalculationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.QueryCalculationRequest}
 */
proto.event.QueryCalculationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.QueryCalculationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.QueryCalculationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.QueryCalculationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.QueryCalculationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCondition();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string operation = 1;
 * @return {string}
 */
proto.event.QueryCalculationRequest.prototype.getOperation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.QueryCalculationRequest} returns this
 */
proto.event.QueryCalculationRequest.prototype.setOperation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string alias = 2;
 * @return {string}
 */
proto.event.QueryCalculationRequest.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.QueryCalculationRequest} returns this
 */
proto.event.QueryCalculationRequest.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string entity = 3;
 * @return {string}
 */
proto.event.QueryCalculationRequest.prototype.getEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.QueryCalculationRequest} returns this
 */
proto.event.QueryCalculationRequest.prototype.setEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string condition = 4;
 * @return {string}
 */
proto.event.QueryCalculationRequest.prototype.getCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.QueryCalculationRequest} returns this
 */
proto.event.QueryCalculationRequest.prototype.setCondition = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.QueryCalculationResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.QueryCalculationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.QueryCalculationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.QueryCalculationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.QueryCalculationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.QueryCalculationResponse}
 */
proto.event.QueryCalculationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.QueryCalculationResponse;
  return proto.event.QueryCalculationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.QueryCalculationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.QueryCalculationResponse}
 */
proto.event.QueryCalculationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.QueryCalculationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.QueryCalculationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.QueryCalculationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.QueryCalculationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string result = 1;
 * @return {!Array<string>}
 */
proto.event.QueryCalculationResponse.prototype.getResultList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.QueryCalculationResponse} returns this
 */
proto.event.QueryCalculationResponse.prototype.setResultList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.QueryCalculationResponse} returns this
 */
proto.event.QueryCalculationResponse.prototype.addResult = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.QueryCalculationResponse} returns this
 */
proto.event.QueryCalculationResponse.prototype.clearResultList = function() {
  return this.setResultList([]);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.event.QueryCalculationResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.QueryCalculationResponse} returns this
 */
proto.event.QueryCalculationResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.PlaceAvailableRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.PlaceAvailableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.PlaceAvailableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.PlaceAvailableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.PlaceAvailableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cartItemList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    workspacepublickey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    idEvent: jspb.Message.getFieldWithDefault(msg, 3, 0),
    holdToken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    adminkey: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.PlaceAvailableRequest}
 */
proto.event.PlaceAvailableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.PlaceAvailableRequest;
  return proto.event.PlaceAvailableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.PlaceAvailableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.PlaceAvailableRequest}
 */
proto.event.PlaceAvailableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCartItem(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspacepublickey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdEvent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHoldToken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdminkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.PlaceAvailableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.PlaceAvailableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.PlaceAvailableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.PlaceAvailableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCartItemList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getWorkspacepublickey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdEvent();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getHoldToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAdminkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated string cart_item = 1;
 * @return {!Array<string>}
 */
proto.event.PlaceAvailableRequest.prototype.getCartItemList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.PlaceAvailableRequest} returns this
 */
proto.event.PlaceAvailableRequest.prototype.setCartItemList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.PlaceAvailableRequest} returns this
 */
proto.event.PlaceAvailableRequest.prototype.addCartItem = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.PlaceAvailableRequest} returns this
 */
proto.event.PlaceAvailableRequest.prototype.clearCartItemList = function() {
  return this.setCartItemList([]);
};


/**
 * optional string workspacePublicKey = 2;
 * @return {string}
 */
proto.event.PlaceAvailableRequest.prototype.getWorkspacepublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.PlaceAvailableRequest} returns this
 */
proto.event.PlaceAvailableRequest.prototype.setWorkspacepublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 id_event = 3;
 * @return {number}
 */
proto.event.PlaceAvailableRequest.prototype.getIdEvent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.PlaceAvailableRequest} returns this
 */
proto.event.PlaceAvailableRequest.prototype.setIdEvent = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string hold_token = 4;
 * @return {string}
 */
proto.event.PlaceAvailableRequest.prototype.getHoldToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.PlaceAvailableRequest} returns this
 */
proto.event.PlaceAvailableRequest.prototype.setHoldToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string adminKey = 5;
 * @return {string}
 */
proto.event.PlaceAvailableRequest.prototype.getAdminkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.PlaceAvailableRequest} returns this
 */
proto.event.PlaceAvailableRequest.prototype.setAdminkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.PlaceAvailableResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.PlaceAvailableResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.PlaceAvailableResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.PlaceAvailableResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.PlaceAvailableResponse}
 */
proto.event.PlaceAvailableResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.PlaceAvailableResponse;
  return proto.event.PlaceAvailableResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.PlaceAvailableResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.PlaceAvailableResponse}
 */
proto.event.PlaceAvailableResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.PlaceAvailableResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.PlaceAvailableResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.PlaceAvailableResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.PlaceAvailableResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.event.PlaceAvailableResponse.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.PlaceAvailableResponse} returns this
 */
proto.event.PlaceAvailableResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.event.PlaceAvailableResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.PlaceAvailableResponse} returns this
 */
proto.event.PlaceAvailableResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.GetEventListRequest.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fieldNameList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    fieldValueList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    operatorList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    pageSize: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventListRequest}
 */
proto.event.GetEventListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventListRequest;
  return proto.event.GetEventListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventListRequest}
 */
proto.event.GetEventListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOperator(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFieldNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFieldValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getOperatorList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.event.GetEventListRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string field_name = 2;
 * @return {!Array<string>}
 */
proto.event.GetEventListRequest.prototype.getFieldNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.setFieldNameList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.addFieldName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.clearFieldNameList = function() {
  return this.setFieldNameList([]);
};


/**
 * repeated string field_value = 3;
 * @return {!Array<string>}
 */
proto.event.GetEventListRequest.prototype.getFieldValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.setFieldValueList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.addFieldValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.clearFieldValueList = function() {
  return this.setFieldValueList([]);
};


/**
 * repeated string operator = 4;
 * @return {!Array<string>}
 */
proto.event.GetEventListRequest.prototype.getOperatorList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.setOperatorList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.addOperator = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.clearOperatorList = function() {
  return this.setOperatorList([]);
};


/**
 * optional int32 page_size = 5;
 * @return {number}
 */
proto.event.GetEventListRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventListRequest} returns this
 */
proto.event.GetEventListRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.GetTicketTypeListRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetTicketTypeListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetTicketTypeListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetTicketTypeListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTicketTypeListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fieldNameList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    fieldValueList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    pageSize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetTicketTypeListRequest}
 */
proto.event.GetTicketTypeListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetTicketTypeListRequest;
  return proto.event.GetTicketTypeListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetTicketTypeListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetTicketTypeListRequest}
 */
proto.event.GetTicketTypeListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetTicketTypeListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetTicketTypeListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetTicketTypeListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTicketTypeListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFieldNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFieldValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.event.GetTicketTypeListRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetTicketTypeListRequest} returns this
 */
proto.event.GetTicketTypeListRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string field_name = 2;
 * @return {!Array<string>}
 */
proto.event.GetTicketTypeListRequest.prototype.getFieldNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetTicketTypeListRequest} returns this
 */
proto.event.GetTicketTypeListRequest.prototype.setFieldNameList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetTicketTypeListRequest} returns this
 */
proto.event.GetTicketTypeListRequest.prototype.addFieldName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetTicketTypeListRequest} returns this
 */
proto.event.GetTicketTypeListRequest.prototype.clearFieldNameList = function() {
  return this.setFieldNameList([]);
};


/**
 * repeated string field_value = 3;
 * @return {!Array<string>}
 */
proto.event.GetTicketTypeListRequest.prototype.getFieldValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetTicketTypeListRequest} returns this
 */
proto.event.GetTicketTypeListRequest.prototype.setFieldValueList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetTicketTypeListRequest} returns this
 */
proto.event.GetTicketTypeListRequest.prototype.addFieldValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetTicketTypeListRequest} returns this
 */
proto.event.GetTicketTypeListRequest.prototype.clearFieldValueList = function() {
  return this.setFieldValueList([]);
};


/**
 * optional int32 page_size = 4;
 * @return {number}
 */
proto.event.GetTicketTypeListRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetTicketTypeListRequest} returns this
 */
proto.event.GetTicketTypeListRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.GetEventRequest.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fieldNameList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    fieldValueList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    operatorList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    pageSize: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventRequest}
 */
proto.event.GetEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventRequest;
  return proto.event.GetEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventRequest}
 */
proto.event.GetEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOperator(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFieldNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFieldValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getOperatorList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.event.GetEventRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string field_name = 2;
 * @return {!Array<string>}
 */
proto.event.GetEventRequest.prototype.getFieldNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.setFieldNameList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.addFieldName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.clearFieldNameList = function() {
  return this.setFieldNameList([]);
};


/**
 * repeated string field_value = 3;
 * @return {!Array<string>}
 */
proto.event.GetEventRequest.prototype.getFieldValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.setFieldValueList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.addFieldValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.clearFieldValueList = function() {
  return this.setFieldValueList([]);
};


/**
 * repeated string operator = 4;
 * @return {!Array<string>}
 */
proto.event.GetEventRequest.prototype.getOperatorList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.setOperatorList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.addOperator = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.clearOperatorList = function() {
  return this.setOperatorList([]);
};


/**
 * optional int32 page_size = 5;
 * @return {number}
 */
proto.event.GetEventRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventRequest} returns this
 */
proto.event.GetEventRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reference: jspb.Message.getFieldWithDefault(msg, 3, ""),
    date: jspb.Message.getFieldWithDefault(msg, 4, ""),
    saleDateFrom: jspb.Message.getFieldWithDefault(msg, 5, ""),
    saleDateTo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    currencyId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    partnerId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    sliderId: jspb.Message.getFieldWithDefault(msg, 9, 0),
    categId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    placeId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    published: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    useSeatMap: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    image: jspb.Message.getFieldWithDefault(msg, 14, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 15, ""),
    description: jspb.Message.getFieldWithDefault(msg, 16, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 17, ""),
    writeDate: jspb.Message.getFieldWithDefault(msg, 18, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 19, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 20, 0),
    saleOnline: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    saleMessenger: jspb.Message.getBooleanFieldWithDefault(msg, 22, false),
    salePos: jspb.Message.getBooleanFieldWithDefault(msg, 23, false),
    doorOpening: jspb.Message.getFieldWithDefault(msg, 24, ""),
    color: jspb.Message.getFieldWithDefault(msg, 25, ""),
    parentId: jspb.Message.getFieldWithDefault(msg, 26, 0),
    isParent: jspb.Message.getBooleanFieldWithDefault(msg, 27, false),
    cartOrderLimited: jspb.Message.getBooleanFieldWithDefault(msg, 28, false),
    limitNbFreeTickets: jspb.Message.getFieldWithDefault(msg, 29, 0),
    limitNbSeatsTickets: jspb.Message.getFieldWithDefault(msg, 30, 0),
    state: jspb.Message.getFieldWithDefault(msg, 31, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 32, false),
    seatsIoEventSecretKey: jspb.Message.getFieldWithDefault(msg, 33, ""),
    seatsIoEventChartKey: jspb.Message.getFieldWithDefault(msg, 34, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventResponse}
 */
proto.event.GetEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventResponse;
  return proto.event.GetEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventResponse}
 */
proto.event.GetEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReference(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaleDateFrom(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaleDateTo(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrencyId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartnerId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSliderId(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCategId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaceId(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublished(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseSeatMap(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaleOnline(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaleMessenger(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSalePos(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoorOpening(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentId(value);
      break;
    case 27:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsParent(value);
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCartOrderLimited(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimitNbFreeTickets(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimitNbSeatsTickets(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatsIoEventSecretKey(value);
      break;
    case 34:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatsIoEventChartKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReference();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSaleDateFrom();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSaleDateTo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCurrencyId();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPartnerId();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getSliderId();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCategId();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPlaceId();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getPublished();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getUseSeatMap();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getSaleOnline();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getSaleMessenger();
  if (f) {
    writer.writeBool(
      22,
      f
    );
  }
  f = message.getSalePos();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = message.getDoorOpening();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getIsParent();
  if (f) {
    writer.writeBool(
      27,
      f
    );
  }
  f = message.getCartOrderLimited();
  if (f) {
    writer.writeBool(
      28,
      f
    );
  }
  f = message.getLimitNbFreeTickets();
  if (f !== 0) {
    writer.writeInt32(
      29,
      f
    );
  }
  f = message.getLimitNbSeatsTickets();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      32,
      f
    );
  }
  f = message.getSeatsIoEventSecretKey();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = message.getSeatsIoEventChartKey();
  if (f.length > 0) {
    writer.writeString(
      34,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reference = 3;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setReference = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string date = 4;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sale_date_from = 5;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getSaleDateFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setSaleDateFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string sale_date_to = 6;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getSaleDateTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setSaleDateTo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 currency_id = 7;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getCurrencyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setCurrencyId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 partner_id = 8;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getPartnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setPartnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 slider_id = 9;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getSliderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setSliderId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 categ_id = 10;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getCategId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setCategId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 place_id = 11;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getPlaceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setPlaceId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool published = 12;
 * @return {boolean}
 */
proto.event.GetEventResponse.prototype.getPublished = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setPublished = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool use_seat_map = 13;
 * @return {boolean}
 */
proto.event.GetEventResponse.prototype.getUseSeatMap = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setUseSeatMap = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string image = 14;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string timezone = 15;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string description = 16;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string create_date = 17;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string write_date = 18;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional int32 create_uid = 19;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 write_uid = 20;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional bool sale_online = 21;
 * @return {boolean}
 */
proto.event.GetEventResponse.prototype.getSaleOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setSaleOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * optional bool sale_messenger = 22;
 * @return {boolean}
 */
proto.event.GetEventResponse.prototype.getSaleMessenger = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setSaleMessenger = function(value) {
  return jspb.Message.setProto3BooleanField(this, 22, value);
};


/**
 * optional bool sale_pos = 23;
 * @return {boolean}
 */
proto.event.GetEventResponse.prototype.getSalePos = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setSalePos = function(value) {
  return jspb.Message.setProto3BooleanField(this, 23, value);
};


/**
 * optional string door_opening = 24;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getDoorOpening = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setDoorOpening = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional string color = 25;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional int32 parent_id = 26;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setParentId = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional bool is_parent = 27;
 * @return {boolean}
 */
proto.event.GetEventResponse.prototype.getIsParent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 27, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setIsParent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 27, value);
};


/**
 * optional bool cart_order_limited = 28;
 * @return {boolean}
 */
proto.event.GetEventResponse.prototype.getCartOrderLimited = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 28, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setCartOrderLimited = function(value) {
  return jspb.Message.setProto3BooleanField(this, 28, value);
};


/**
 * optional int32 limit_nb_free_tickets = 29;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getLimitNbFreeTickets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setLimitNbFreeTickets = function(value) {
  return jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional int32 limit_nb_seats_tickets = 30;
 * @return {number}
 */
proto.event.GetEventResponse.prototype.getLimitNbSeatsTickets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setLimitNbSeatsTickets = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional string state = 31;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional bool active = 32;
 * @return {boolean}
 */
proto.event.GetEventResponse.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 32, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 32, value);
};


/**
 * optional string seats_io_event_secret_key = 33;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getSeatsIoEventSecretKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setSeatsIoEventSecretKey = function(value) {
  return jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * optional string seats_io_event_chart_key = 34;
 * @return {string}
 */
proto.event.GetEventResponse.prototype.getSeatsIoEventChartKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventResponse} returns this
 */
proto.event.GetEventResponse.prototype.setSeatsIoEventChartKey = function(value) {
  return jspb.Message.setProto3StringField(this, 34, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.GetEventCategoryRequest.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventCategoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventCategoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventCategoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventCategoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fieldNameList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    fieldValueList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventCategoryRequest}
 */
proto.event.GetEventCategoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventCategoryRequest;
  return proto.event.GetEventCategoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventCategoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventCategoryRequest}
 */
proto.event.GetEventCategoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventCategoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventCategoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventCategoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventCategoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFieldNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFieldValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.event.GetEventCategoryRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventCategoryRequest} returns this
 */
proto.event.GetEventCategoryRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string field_name = 2;
 * @return {!Array<string>}
 */
proto.event.GetEventCategoryRequest.prototype.getFieldNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventCategoryRequest} returns this
 */
proto.event.GetEventCategoryRequest.prototype.setFieldNameList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventCategoryRequest} returns this
 */
proto.event.GetEventCategoryRequest.prototype.addFieldName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventCategoryRequest} returns this
 */
proto.event.GetEventCategoryRequest.prototype.clearFieldNameList = function() {
  return this.setFieldNameList([]);
};


/**
 * repeated string field_value = 3;
 * @return {!Array<string>}
 */
proto.event.GetEventCategoryRequest.prototype.getFieldValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventCategoryRequest} returns this
 */
proto.event.GetEventCategoryRequest.prototype.setFieldValueList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventCategoryRequest} returns this
 */
proto.event.GetEventCategoryRequest.prototype.addFieldValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventCategoryRequest} returns this
 */
proto.event.GetEventCategoryRequest.prototype.clearFieldValueList = function() {
  return this.setFieldValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventCategoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventCategoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventCategoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventCategoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventCategoryResponse}
 */
proto.event.GetEventCategoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventCategoryResponse;
  return proto.event.GetEventCategoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventCategoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventCategoryResponse}
 */
proto.event.GetEventCategoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventCategoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventCategoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventCategoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventCategoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.event.GetEventCategoryResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventCategoryResponse} returns this
 */
proto.event.GetEventCategoryResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 parent_id = 2;
 * @return {number}
 */
proto.event.GetEventCategoryResponse.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventCategoryResponse} returns this
 */
proto.event.GetEventCategoryResponse.prototype.setParentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.event.GetEventCategoryResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventCategoryResponse} returns this
 */
proto.event.GetEventCategoryResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool active = 4;
 * @return {boolean}
 */
proto.event.GetEventCategoryResponse.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.GetEventCategoryResponse} returns this
 */
proto.event.GetEventCategoryResponse.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.AllEventCategory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.AllEventCategory.prototype.toObject = function(opt_includeInstance) {
  return proto.event.AllEventCategory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.AllEventCategory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.AllEventCategory.toObject = function(includeInstance, msg) {
  var f, obj = {
    categoriesList: jspb.Message.toObjectList(msg.getCategoriesList(),
    proto.event.GetEventCategoryResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.AllEventCategory}
 */
proto.event.AllEventCategory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.AllEventCategory;
  return proto.event.AllEventCategory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.AllEventCategory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.AllEventCategory}
 */
proto.event.AllEventCategory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.GetEventCategoryResponse;
      reader.readMessage(value,proto.event.GetEventCategoryResponse.deserializeBinaryFromReader);
      msg.addCategories(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.AllEventCategory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.AllEventCategory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.AllEventCategory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.AllEventCategory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.GetEventCategoryResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetEventCategoryResponse categories = 1;
 * @return {!Array<!proto.event.GetEventCategoryResponse>}
 */
proto.event.AllEventCategory.prototype.getCategoriesList = function() {
  return /** @type{!Array<!proto.event.GetEventCategoryResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.GetEventCategoryResponse, 1));
};


/**
 * @param {!Array<!proto.event.GetEventCategoryResponse>} value
 * @return {!proto.event.AllEventCategory} returns this
*/
proto.event.AllEventCategory.prototype.setCategoriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.GetEventCategoryResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventCategoryResponse}
 */
proto.event.AllEventCategory.prototype.addCategories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.GetEventCategoryResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.AllEventCategory} returns this
 */
proto.event.AllEventCategory.prototype.clearCategoriesList = function() {
  return this.setCategoriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.AllEvents.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.AllEvents.prototype.toObject = function(opt_includeInstance) {
  return proto.event.AllEvents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.AllEvents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.AllEvents.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.event.GetEventResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.AllEvents}
 */
proto.event.AllEvents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.AllEvents;
  return proto.event.AllEvents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.AllEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.AllEvents}
 */
proto.event.AllEvents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.GetEventResponse;
      reader.readMessage(value,proto.event.GetEventResponse.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.AllEvents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.AllEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.AllEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.AllEvents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.GetEventResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetEventResponse events = 1;
 * @return {!Array<!proto.event.GetEventResponse>}
 */
proto.event.AllEvents.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.event.GetEventResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.GetEventResponse, 1));
};


/**
 * @param {!Array<!proto.event.GetEventResponse>} value
 * @return {!proto.event.AllEvents} returns this
*/
proto.event.AllEvents.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.GetEventResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventResponse}
 */
proto.event.AllEvents.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.GetEventResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.AllEvents} returns this
 */
proto.event.AllEvents.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.EventsInformations.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.EventsInformations.prototype.toObject = function(opt_includeInstance) {
  return proto.event.EventsInformations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.EventsInformations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.EventsInformations.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.event.GetEventResponse.toObject, includeInstance),
    placesList: jspb.Message.toObjectList(msg.getPlacesList(),
    proto.event.GetEventPlaceResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.EventsInformations}
 */
proto.event.EventsInformations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.EventsInformations;
  return proto.event.EventsInformations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.EventsInformations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.EventsInformations}
 */
proto.event.EventsInformations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.GetEventResponse;
      reader.readMessage(value,proto.event.GetEventResponse.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 2:
      var value = new proto.event.GetEventPlaceResponse;
      reader.readMessage(value,proto.event.GetEventPlaceResponse.deserializeBinaryFromReader);
      msg.addPlaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.EventsInformations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.EventsInformations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.EventsInformations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.EventsInformations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.GetEventResponse.serializeBinaryToWriter
    );
  }
  f = message.getPlacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.event.GetEventPlaceResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetEventResponse events = 1;
 * @return {!Array<!proto.event.GetEventResponse>}
 */
proto.event.EventsInformations.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.event.GetEventResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.GetEventResponse, 1));
};


/**
 * @param {!Array<!proto.event.GetEventResponse>} value
 * @return {!proto.event.EventsInformations} returns this
*/
proto.event.EventsInformations.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.GetEventResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventResponse}
 */
proto.event.EventsInformations.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.GetEventResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.EventsInformations} returns this
 */
proto.event.EventsInformations.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * repeated GetEventPlaceResponse places = 2;
 * @return {!Array<!proto.event.GetEventPlaceResponse>}
 */
proto.event.EventsInformations.prototype.getPlacesList = function() {
  return /** @type{!Array<!proto.event.GetEventPlaceResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.GetEventPlaceResponse, 2));
};


/**
 * @param {!Array<!proto.event.GetEventPlaceResponse>} value
 * @return {!proto.event.EventsInformations} returns this
*/
proto.event.EventsInformations.prototype.setPlacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.event.GetEventPlaceResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventPlaceResponse}
 */
proto.event.EventsInformations.prototype.addPlaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.event.GetEventPlaceResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.EventsInformations} returns this
 */
proto.event.EventsInformations.prototype.clearPlacesList = function() {
  return this.setPlacesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.DeleteEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.DeleteEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.DeleteEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.DeleteEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.DeleteEventRequest}
 */
proto.event.DeleteEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.DeleteEventRequest;
  return proto.event.DeleteEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.DeleteEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.DeleteEventRequest}
 */
proto.event.DeleteEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.DeleteEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.DeleteEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.DeleteEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.DeleteEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.event.DeleteEventRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.DeleteEventRequest} returns this
 */
proto.event.DeleteEventRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.DeleteEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.DeleteEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.DeleteEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.DeleteEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.DeleteEventResponse}
 */
proto.event.DeleteEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.DeleteEventResponse;
  return proto.event.DeleteEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.DeleteEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.DeleteEventResponse}
 */
proto.event.DeleteEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.DeleteEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.DeleteEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.DeleteEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.DeleteEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.event.DeleteEventResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.DeleteEventResponse} returns this
 */
proto.event.DeleteEventResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.GetTicketTypeRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetTicketTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetTicketTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetTicketTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTicketTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldNameList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    fieldValueList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    page: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetTicketTypeRequest}
 */
proto.event.GetTicketTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetTicketTypeRequest;
  return proto.event.GetTicketTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetTicketTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetTicketTypeRequest}
 */
proto.event.GetTicketTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetTicketTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetTicketTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetTicketTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTicketTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFieldValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated string field_name = 1;
 * @return {!Array<string>}
 */
proto.event.GetTicketTypeRequest.prototype.getFieldNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetTicketTypeRequest} returns this
 */
proto.event.GetTicketTypeRequest.prototype.setFieldNameList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetTicketTypeRequest} returns this
 */
proto.event.GetTicketTypeRequest.prototype.addFieldName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetTicketTypeRequest} returns this
 */
proto.event.GetTicketTypeRequest.prototype.clearFieldNameList = function() {
  return this.setFieldNameList([]);
};


/**
 * repeated string field_value = 2;
 * @return {!Array<string>}
 */
proto.event.GetTicketTypeRequest.prototype.getFieldValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetTicketTypeRequest} returns this
 */
proto.event.GetTicketTypeRequest.prototype.setFieldValueList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetTicketTypeRequest} returns this
 */
proto.event.GetTicketTypeRequest.prototype.addFieldValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetTicketTypeRequest} returns this
 */
proto.event.GetTicketTypeRequest.prototype.clearFieldValueList = function() {
  return this.setFieldValueList([]);
};


/**
 * optional int32 page = 3;
 * @return {number}
 */
proto.event.GetTicketTypeRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetTicketTypeRequest} returns this
 */
proto.event.GetTicketTypeRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.TicketTypeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.TicketTypeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.TicketTypeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.TicketTypeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reference: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    color: jspb.Message.getFieldWithDefault(msg, 4, ""),
    priceUnit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currencyId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isAdmission: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    seatsioCategKey: jspb.Message.getFieldWithDefault(msg, 8, ""),
    seatsioBestAvailable: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    isFree: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    description: jspb.Message.getFieldWithDefault(msg, 11, ""),
    qty: jspb.Message.getFieldWithDefault(msg, 12, 0),
    dateFrom: jspb.Message.getFieldWithDefault(msg, 13, ""),
    dateTo: jspb.Message.getFieldWithDefault(msg, 14, ""),
    door: jspb.Message.getFieldWithDefault(msg, 15, ""),
    saleOnline: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    saleMessenger: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    salePos: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    createuid: jspb.Message.getFieldWithDefault(msg, 19, 0),
    writeuid: jspb.Message.getFieldWithDefault(msg, 20, 0),
    eventId: jspb.Message.getFieldWithDefault(msg, 21, 0),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 22, false),
    writeDate: jspb.Message.getFieldWithDefault(msg, 23, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 24, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.TicketTypeResponse}
 */
proto.event.TicketTypeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.TicketTypeResponse;
  return proto.event.TicketTypeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.TicketTypeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.TicketTypeResponse}
 */
proto.event.TicketTypeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReference(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriceUnit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrencyId(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAdmission(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatsioCategKey(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSeatsioBestAvailable(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFree(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQty(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateFrom(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateTo(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoor(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaleOnline(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaleMessenger(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSalePos(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateuid(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteuid(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.TicketTypeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.TicketTypeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.TicketTypeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.TicketTypeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReference();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPriceUnit();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCurrencyId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIsAdmission();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSeatsioCategKey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSeatsioBestAvailable();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIsFree();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getQty();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getDateFrom();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDateTo();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getDoor();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getSaleOnline();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getSaleMessenger();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getSalePos();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getCreateuid();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getWriteuid();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      22,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.event.TicketTypeResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string reference = 2;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setReference = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string color = 4;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 price_unit = 5;
 * @return {number}
 */
proto.event.TicketTypeResponse.prototype.getPriceUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setPriceUnit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 currency_id = 6;
 * @return {number}
 */
proto.event.TicketTypeResponse.prototype.getCurrencyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setCurrencyId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool is_admission = 7;
 * @return {boolean}
 */
proto.event.TicketTypeResponse.prototype.getIsAdmission = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setIsAdmission = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string seatsio_categ_key = 8;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getSeatsioCategKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setSeatsioCategKey = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool seatsio_best_available = 9;
 * @return {boolean}
 */
proto.event.TicketTypeResponse.prototype.getSeatsioBestAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setSeatsioBestAvailable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool is_free = 10;
 * @return {boolean}
 */
proto.event.TicketTypeResponse.prototype.getIsFree = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setIsFree = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string description = 11;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 qty = 12;
 * @return {number}
 */
proto.event.TicketTypeResponse.prototype.getQty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setQty = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string date_from = 13;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getDateFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setDateFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string date_to = 14;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getDateTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setDateTo = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string door = 15;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getDoor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setDoor = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional bool sale_online = 16;
 * @return {boolean}
 */
proto.event.TicketTypeResponse.prototype.getSaleOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setSaleOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool sale_messenger = 17;
 * @return {boolean}
 */
proto.event.TicketTypeResponse.prototype.getSaleMessenger = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setSaleMessenger = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional bool sale_pos = 18;
 * @return {boolean}
 */
proto.event.TicketTypeResponse.prototype.getSalePos = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setSalePos = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional int32 createUid = 19;
 * @return {number}
 */
proto.event.TicketTypeResponse.prototype.getCreateuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setCreateuid = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 writeUid = 20;
 * @return {number}
 */
proto.event.TicketTypeResponse.prototype.getWriteuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setWriteuid = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 event_id = 21;
 * @return {number}
 */
proto.event.TicketTypeResponse.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional bool active = 22;
 * @return {boolean}
 */
proto.event.TicketTypeResponse.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 22, value);
};


/**
 * optional string write_date = 23;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string create_date = 24;
 * @return {string}
 */
proto.event.TicketTypeResponse.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.TicketTypeResponse} returns this
 */
proto.event.TicketTypeResponse.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.GetTicketTypesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetTicketTypesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetTicketTypesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetTicketTypesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTicketTypesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tickettypesList: jspb.Message.toObjectList(msg.getTickettypesList(),
    proto.event.TicketTypeResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetTicketTypesResponse}
 */
proto.event.GetTicketTypesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetTicketTypesResponse;
  return proto.event.GetTicketTypesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetTicketTypesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetTicketTypesResponse}
 */
proto.event.GetTicketTypesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.TicketTypeResponse;
      reader.readMessage(value,proto.event.TicketTypeResponse.deserializeBinaryFromReader);
      msg.addTickettypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetTicketTypesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetTicketTypesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetTicketTypesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTicketTypesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTickettypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.TicketTypeResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TicketTypeResponse tickettypes = 1;
 * @return {!Array<!proto.event.TicketTypeResponse>}
 */
proto.event.GetTicketTypesResponse.prototype.getTickettypesList = function() {
  return /** @type{!Array<!proto.event.TicketTypeResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.TicketTypeResponse, 1));
};


/**
 * @param {!Array<!proto.event.TicketTypeResponse>} value
 * @return {!proto.event.GetTicketTypesResponse} returns this
*/
proto.event.GetTicketTypesResponse.prototype.setTickettypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.TicketTypeResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.TicketTypeResponse}
 */
proto.event.GetTicketTypesResponse.prototype.addTickettypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.TicketTypeResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetTicketTypesResponse} returns this
 */
proto.event.GetTicketTypesResponse.prototype.clearTickettypesList = function() {
  return this.setTickettypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.GetEventsByIdsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventsByIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventsByIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventsByIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventsByIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventsByIdsRequest}
 */
proto.event.GetEventsByIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventsByIdsRequest;
  return proto.event.GetEventsByIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventsByIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventsByIdsRequest}
 */
proto.event.GetEventsByIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEventIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventsByIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventsByIdsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventsByIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventsByIdsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 event_ids = 1;
 * @return {!Array<number>}
 */
proto.event.GetEventsByIdsRequest.prototype.getEventIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.event.GetEventsByIdsRequest} returns this
 */
proto.event.GetEventsByIdsRequest.prototype.setEventIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventsByIdsRequest} returns this
 */
proto.event.GetEventsByIdsRequest.prototype.addEventIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventsByIdsRequest} returns this
 */
proto.event.GetEventsByIdsRequest.prototype.clearEventIdsList = function() {
  return this.setEventIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventPlaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventPlaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventPlaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventPlaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventPlaceResponse}
 */
proto.event.GetEventPlaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventPlaceResponse;
  return proto.event.GetEventPlaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventPlaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventPlaceResponse}
 */
proto.event.GetEventPlaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventPlaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventPlaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventPlaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventPlaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.event.GetEventPlaceResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetEventPlaceResponse} returns this
 */
proto.event.GetEventPlaceResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetTagsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetTagsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetTagsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTagsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idevent: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetTagsRequest}
 */
proto.event.GetTagsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetTagsRequest;
  return proto.event.GetTagsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetTagsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetTagsRequest}
 */
proto.event.GetTagsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetTagsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetTagsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetTagsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTagsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdevent();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 idEvent = 1;
 * @return {number}
 */
proto.event.GetTagsRequest.prototype.getIdevent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetTagsRequest} returns this
 */
proto.event.GetTagsRequest.prototype.setIdevent = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetTagsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetTagsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetTagsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTagsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    idevent: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idtags: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tags: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetTagsResponse}
 */
proto.event.GetTagsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetTagsResponse;
  return proto.event.GetTagsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetTagsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetTagsResponse}
 */
proto.event.GetTagsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdevent(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdtags(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetTagsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetTagsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetTagsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTagsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdevent();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIdtags();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTags();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 idEvent = 1;
 * @return {number}
 */
proto.event.GetTagsResponse.prototype.getIdevent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetTagsResponse} returns this
 */
proto.event.GetTagsResponse.prototype.setIdevent = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 idTags = 2;
 * @return {number}
 */
proto.event.GetTagsResponse.prototype.getIdtags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetTagsResponse} returns this
 */
proto.event.GetTagsResponse.prototype.setIdtags = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string tags = 3;
 * @return {string}
 */
proto.event.GetTagsResponse.prototype.getTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetTagsResponse} returns this
 */
proto.event.GetTagsResponse.prototype.setTags = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.AllTagsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.AllTagsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.AllTagsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.AllTagsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.AllTagsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    alltagsList: jspb.Message.toObjectList(msg.getAlltagsList(),
    proto.event.GetTagsResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.AllTagsResponse}
 */
proto.event.AllTagsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.AllTagsResponse;
  return proto.event.AllTagsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.AllTagsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.AllTagsResponse}
 */
proto.event.AllTagsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.GetTagsResponse;
      reader.readMessage(value,proto.event.GetTagsResponse.deserializeBinaryFromReader);
      msg.addAlltags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.AllTagsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.AllTagsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.AllTagsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.AllTagsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlltagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.GetTagsResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetTagsResponse allTags = 1;
 * @return {!Array<!proto.event.GetTagsResponse>}
 */
proto.event.AllTagsResponse.prototype.getAlltagsList = function() {
  return /** @type{!Array<!proto.event.GetTagsResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.GetTagsResponse, 1));
};


/**
 * @param {!Array<!proto.event.GetTagsResponse>} value
 * @return {!proto.event.AllTagsResponse} returns this
*/
proto.event.AllTagsResponse.prototype.setAlltagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.GetTagsResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.GetTagsResponse}
 */
proto.event.AllTagsResponse.prototype.addAlltags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.GetTagsResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.AllTagsResponse} returns this
 */
proto.event.AllTagsResponse.prototype.clearAlltagsList = function() {
  return this.setAlltagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CreateEventPlaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CreateEventPlaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CreateEventPlaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CreateEventPlaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    countryId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    street: jspb.Message.getFieldWithDefault(msg, 2, ""),
    street1: jspb.Message.getFieldWithDefault(msg, 3, ""),
    zip: jspb.Message.getFieldWithDefault(msg, 4, 0),
    venueName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    capacity: jspb.Message.getFieldWithDefault(msg, 6, 0),
    seatsioEventKey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    seatsioVenueStructure: jspb.Message.getFieldWithDefault(msg, 8, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 9, ""),
    writeDate: jspb.Message.getFieldWithDefault(msg, 10, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 11, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    placeId: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CreateEventPlaceRequest}
 */
proto.event.CreateEventPlaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CreateEventPlaceRequest;
  return proto.event.CreateEventPlaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CreateEventPlaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CreateEventPlaceRequest}
 */
proto.event.CreateEventPlaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCountryId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreet(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreet1(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZip(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenueName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCapacity(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatsioEventKey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatsioVenueStructure(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CreateEventPlaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CreateEventPlaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CreateEventPlaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CreateEventPlaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountryId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStreet();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStreet1();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getZip();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getVenueName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCapacity();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSeatsioEventKey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSeatsioVenueStructure();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getPlaceId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional int32 country_id = 1;
 * @return {number}
 */
proto.event.CreateEventPlaceRequest.prototype.getCountryId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setCountryId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string street = 2;
 * @return {string}
 */
proto.event.CreateEventPlaceRequest.prototype.getStreet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setStreet = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string street1 = 3;
 * @return {string}
 */
proto.event.CreateEventPlaceRequest.prototype.getStreet1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setStreet1 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 zip = 4;
 * @return {number}
 */
proto.event.CreateEventPlaceRequest.prototype.getZip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setZip = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string venue_name = 5;
 * @return {string}
 */
proto.event.CreateEventPlaceRequest.prototype.getVenueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setVenueName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 capacity = 6;
 * @return {number}
 */
proto.event.CreateEventPlaceRequest.prototype.getCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setCapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string seatsio_event_key = 7;
 * @return {string}
 */
proto.event.CreateEventPlaceRequest.prototype.getSeatsioEventKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setSeatsioEventKey = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string seatsio_venue_structure = 8;
 * @return {string}
 */
proto.event.CreateEventPlaceRequest.prototype.getSeatsioVenueStructure = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setSeatsioVenueStructure = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string create_date = 9;
 * @return {string}
 */
proto.event.CreateEventPlaceRequest.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string write_date = 10;
 * @return {string}
 */
proto.event.CreateEventPlaceRequest.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 create_uid = 11;
 * @return {number}
 */
proto.event.CreateEventPlaceRequest.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 write_uid = 12;
 * @return {number}
 */
proto.event.CreateEventPlaceRequest.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool active = 14;
 * @return {boolean}
 */
proto.event.CreateEventPlaceRequest.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional string place_id = 15;
 * @return {string}
 */
proto.event.CreateEventPlaceRequest.prototype.getPlaceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CreateEventPlaceRequest} returns this
 */
proto.event.CreateEventPlaceRequest.prototype.setPlaceId = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.CreateEventPlaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.CreateEventPlaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.CreateEventPlaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CreateEventPlaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.CreateEventPlaceResponse}
 */
proto.event.CreateEventPlaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.CreateEventPlaceResponse;
  return proto.event.CreateEventPlaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.CreateEventPlaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.CreateEventPlaceResponse}
 */
proto.event.CreateEventPlaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.CreateEventPlaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.CreateEventPlaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.CreateEventPlaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.CreateEventPlaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.event.CreateEventPlaceResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.CreateEventPlaceResponse} returns this
 */
proto.event.CreateEventPlaceResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.event.CreateEventPlaceResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.CreateEventPlaceResponse} returns this
 */
proto.event.CreateEventPlaceResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.GetEventPlaceRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventPlaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventPlaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventPlaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventPlaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldNameList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    fieldValueList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventPlaceRequest}
 */
proto.event.GetEventPlaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventPlaceRequest;
  return proto.event.GetEventPlaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventPlaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventPlaceRequest}
 */
proto.event.GetEventPlaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventPlaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventPlaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventPlaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventPlaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFieldValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string field_name = 1;
 * @return {!Array<string>}
 */
proto.event.GetEventPlaceRequest.prototype.getFieldNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventPlaceRequest} returns this
 */
proto.event.GetEventPlaceRequest.prototype.setFieldNameList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventPlaceRequest} returns this
 */
proto.event.GetEventPlaceRequest.prototype.addFieldName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventPlaceRequest} returns this
 */
proto.event.GetEventPlaceRequest.prototype.clearFieldNameList = function() {
  return this.setFieldNameList([]);
};


/**
 * repeated string field_value = 2;
 * @return {!Array<string>}
 */
proto.event.GetEventPlaceRequest.prototype.getFieldValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.event.GetEventPlaceRequest} returns this
 */
proto.event.GetEventPlaceRequest.prototype.setFieldValueList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventPlaceRequest} returns this
 */
proto.event.GetEventPlaceRequest.prototype.addFieldValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventPlaceRequest} returns this
 */
proto.event.GetEventPlaceRequest.prototype.clearFieldValueList = function() {
  return this.setFieldValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.AllEventPlace.prototype.toObject = function(opt_includeInstance) {
  return proto.event.AllEventPlace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.AllEventPlace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.AllEventPlace.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    countryId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    street: jspb.Message.getFieldWithDefault(msg, 3, ""),
    street1: jspb.Message.getFieldWithDefault(msg, 4, ""),
    zip: jspb.Message.getFieldWithDefault(msg, 5, 0),
    venueName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    capacity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    seatsioEventKey: jspb.Message.getFieldWithDefault(msg, 8, ""),
    seatsioVenueStructure: jspb.Message.getFieldWithDefault(msg, 9, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 10, ""),
    writeDate: jspb.Message.getFieldWithDefault(msg, 11, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 13, 0),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    placeId: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.AllEventPlace}
 */
proto.event.AllEventPlace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.AllEventPlace;
  return proto.event.AllEventPlace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.AllEventPlace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.AllEventPlace}
 */
proto.event.AllEventPlace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCountryId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreet(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreet1(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZip(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVenueName(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCapacity(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatsioEventKey(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatsioVenueStructure(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.AllEventPlace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.AllEventPlace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.AllEventPlace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.AllEventPlace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCountryId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStreet();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStreet1();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getZip();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getVenueName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCapacity();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSeatsioEventKey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSeatsioVenueStructure();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getPlaceId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.event.AllEventPlace.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 country_id = 2;
 * @return {number}
 */
proto.event.AllEventPlace.prototype.getCountryId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setCountryId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string street = 3;
 * @return {string}
 */
proto.event.AllEventPlace.prototype.getStreet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setStreet = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string street1 = 4;
 * @return {string}
 */
proto.event.AllEventPlace.prototype.getStreet1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setStreet1 = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 zip = 5;
 * @return {number}
 */
proto.event.AllEventPlace.prototype.getZip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setZip = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string venue_name = 6;
 * @return {string}
 */
proto.event.AllEventPlace.prototype.getVenueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setVenueName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 capacity = 7;
 * @return {number}
 */
proto.event.AllEventPlace.prototype.getCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setCapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string seatsio_event_key = 8;
 * @return {string}
 */
proto.event.AllEventPlace.prototype.getSeatsioEventKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setSeatsioEventKey = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string seatsio_venue_structure = 9;
 * @return {string}
 */
proto.event.AllEventPlace.prototype.getSeatsioVenueStructure = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setSeatsioVenueStructure = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string create_date = 10;
 * @return {string}
 */
proto.event.AllEventPlace.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string write_date = 11;
 * @return {string}
 */
proto.event.AllEventPlace.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 create_uid = 12;
 * @return {number}
 */
proto.event.AllEventPlace.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 write_uid = 13;
 * @return {number}
 */
proto.event.AllEventPlace.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bool active = 14;
 * @return {boolean}
 */
proto.event.AllEventPlace.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional string place_id = 15;
 * @return {string}
 */
proto.event.AllEventPlace.prototype.getPlaceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.AllEventPlace} returns this
 */
proto.event.AllEventPlace.prototype.setPlaceId = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.EventPlaceResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.EventPlaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.EventPlaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.EventPlaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.EventPlaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventplacesList: jspb.Message.toObjectList(msg.getEventplacesList(),
    proto.event.AllEventPlace.toObject, includeInstance),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.EventPlaceResponse}
 */
proto.event.EventPlaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.EventPlaceResponse;
  return proto.event.EventPlaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.EventPlaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.EventPlaceResponse}
 */
proto.event.EventPlaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.AllEventPlace;
      reader.readMessage(value,proto.event.AllEventPlace.deserializeBinaryFromReader);
      msg.addEventplaces(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.EventPlaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.EventPlaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.EventPlaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.EventPlaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventplacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.AllEventPlace.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated AllEventPlace eventPlaces = 1;
 * @return {!Array<!proto.event.AllEventPlace>}
 */
proto.event.EventPlaceResponse.prototype.getEventplacesList = function() {
  return /** @type{!Array<!proto.event.AllEventPlace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.AllEventPlace, 1));
};


/**
 * @param {!Array<!proto.event.AllEventPlace>} value
 * @return {!proto.event.EventPlaceResponse} returns this
*/
proto.event.EventPlaceResponse.prototype.setEventplacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.AllEventPlace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.AllEventPlace}
 */
proto.event.EventPlaceResponse.prototype.addEventplaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.AllEventPlace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.EventPlaceResponse} returns this
 */
proto.event.EventPlaceResponse.prototype.clearEventplacesList = function() {
  return this.setEventplacesList([]);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.event.EventPlaceResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.EventPlaceResponse} returns this
 */
proto.event.EventPlaceResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.DetailSeatsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.DetailSeatsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.DetailSeatsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.DetailSeatsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workspacesecretkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chartkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    workspacepublickey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    idevent: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.DetailSeatsRequest}
 */
proto.event.DetailSeatsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.DetailSeatsRequest;
  return proto.event.DetailSeatsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.DetailSeatsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.DetailSeatsRequest}
 */
proto.event.DetailSeatsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspacesecretkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChartkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspacepublickey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventkey(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.DetailSeatsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.DetailSeatsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.DetailSeatsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.DetailSeatsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkspacesecretkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChartkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWorkspacepublickey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIdevent();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string workspaceSecretKey = 1;
 * @return {string}
 */
proto.event.DetailSeatsRequest.prototype.getWorkspacesecretkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.DetailSeatsRequest} returns this
 */
proto.event.DetailSeatsRequest.prototype.setWorkspacesecretkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string chartKey = 2;
 * @return {string}
 */
proto.event.DetailSeatsRequest.prototype.getChartkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.DetailSeatsRequest} returns this
 */
proto.event.DetailSeatsRequest.prototype.setChartkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string workspacePublicKey = 3;
 * @return {string}
 */
proto.event.DetailSeatsRequest.prototype.getWorkspacepublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.DetailSeatsRequest} returns this
 */
proto.event.DetailSeatsRequest.prototype.setWorkspacepublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string eventKey = 4;
 * @return {string}
 */
proto.event.DetailSeatsRequest.prototype.getEventkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.DetailSeatsRequest} returns this
 */
proto.event.DetailSeatsRequest.prototype.setEventkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 idevent = 5;
 * @return {number}
 */
proto.event.DetailSeatsRequest.prototype.getIdevent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.DetailSeatsRequest} returns this
 */
proto.event.DetailSeatsRequest.prototype.setIdevent = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.DetailSeatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.DetailSeatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.DetailSeatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.DetailSeatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantityMap: (f = msg.getQuantityMap()) ? f.toObject(includeInstance, undefined) : [],
    totalquantity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.DetailSeatsResponse}
 */
proto.event.DetailSeatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.DetailSeatsResponse;
  return proto.event.DetailSeatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.DetailSeatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.DetailSeatsResponse}
 */
proto.event.DetailSeatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getQuantityMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalquantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.DetailSeatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.DetailSeatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.DetailSeatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.DetailSeatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuantityMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getTotalquantity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * map<string, string> quantity = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.event.DetailSeatsResponse.prototype.getQuantityMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.event.DetailSeatsResponse} returns this
 */
proto.event.DetailSeatsResponse.prototype.clearQuantityMap = function() {
  this.getQuantityMap().clear();
  return this;};


/**
 * optional int32 totalQuantity = 2;
 * @return {number}
 */
proto.event.DetailSeatsResponse.prototype.getTotalquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.DetailSeatsResponse} returns this
 */
proto.event.DetailSeatsResponse.prototype.setTotalquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.SumTicketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.SumTicketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.SumTicketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.SumTicketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idevent: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.SumTicketRequest}
 */
proto.event.SumTicketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.SumTicketRequest;
  return proto.event.SumTicketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.SumTicketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.SumTicketRequest}
 */
proto.event.SumTicketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.SumTicketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.SumTicketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.SumTicketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.SumTicketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdevent();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 idEvent = 1;
 * @return {number}
 */
proto.event.SumTicketRequest.prototype.getIdevent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.SumTicketRequest} returns this
 */
proto.event.SumTicketRequest.prototype.setIdevent = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.SumTicketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.SumTicketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.SumTicketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.SumTicketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idevent: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.SumTicketResponse}
 */
proto.event.SumTicketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.SumTicketResponse;
  return proto.event.SumTicketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.SumTicketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.SumTicketResponse}
 */
proto.event.SumTicketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.SumTicketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.SumTicketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.SumTicketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.SumTicketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSum();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIdevent();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 sum = 1;
 * @return {number}
 */
proto.event.SumTicketResponse.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.SumTicketResponse} returns this
 */
proto.event.SumTicketResponse.prototype.setSum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 idEvent = 2;
 * @return {number}
 */
proto.event.SumTicketResponse.prototype.getIdevent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.SumTicketResponse} returns this
 */
proto.event.SumTicketResponse.prototype.setIdevent = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventByPlannerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventByPlannerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventByPlannerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventByPlannerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idplanner: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventByPlannerRequest}
 */
proto.event.GetEventByPlannerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventByPlannerRequest;
  return proto.event.GetEventByPlannerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventByPlannerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventByPlannerRequest}
 */
proto.event.GetEventByPlannerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdplanner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventByPlannerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventByPlannerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventByPlannerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventByPlannerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdplanner();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 idPlanner = 1;
 * @return {number}
 */
proto.event.GetEventByPlannerRequest.prototype.getIdplanner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetEventByPlannerRequest} returns this
 */
proto.event.GetEventByPlannerRequest.prototype.setIdplanner = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.event.GetEventByPlannerResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetEventByPlannerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetEventByPlannerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetEventByPlannerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventByPlannerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.event.GetEventResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetEventByPlannerResponse}
 */
proto.event.GetEventByPlannerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetEventByPlannerResponse;
  return proto.event.GetEventByPlannerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetEventByPlannerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetEventByPlannerResponse}
 */
proto.event.GetEventByPlannerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.event.GetEventResponse;
      reader.readMessage(value,proto.event.GetEventResponse.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetEventByPlannerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetEventByPlannerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetEventByPlannerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetEventByPlannerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.event.GetEventResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GetEventResponse events = 1;
 * @return {!Array<!proto.event.GetEventResponse>}
 */
proto.event.GetEventByPlannerResponse.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.event.GetEventResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.event.GetEventResponse, 1));
};


/**
 * @param {!Array<!proto.event.GetEventResponse>} value
 * @return {!proto.event.GetEventByPlannerResponse} returns this
*/
proto.event.GetEventByPlannerResponse.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.event.GetEventResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.event.GetEventResponse}
 */
proto.event.GetEventByPlannerResponse.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.event.GetEventResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.event.GetEventByPlannerResponse} returns this
 */
proto.event.GetEventByPlannerResponse.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetTurnoverCreatedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetTurnoverCreatedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetTurnoverCreatedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTurnoverCreatedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetTurnoverCreatedRequest}
 */
proto.event.GetTurnoverCreatedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetTurnoverCreatedRequest;
  return proto.event.GetTurnoverCreatedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetTurnoverCreatedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetTurnoverCreatedRequest}
 */
proto.event.GetTurnoverCreatedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetTurnoverCreatedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetTurnoverCreatedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetTurnoverCreatedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTurnoverCreatedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 eventId = 1;
 * @return {number}
 */
proto.event.GetTurnoverCreatedRequest.prototype.getEventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetTurnoverCreatedRequest} returns this
 */
proto.event.GetTurnoverCreatedRequest.prototype.setEventid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.event.GetTurnoverCreatedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.event.GetTurnoverCreatedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.event.GetTurnoverCreatedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTurnoverCreatedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    summaxturnover: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.event.GetTurnoverCreatedResponse}
 */
proto.event.GetTurnoverCreatedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.event.GetTurnoverCreatedResponse;
  return proto.event.GetTurnoverCreatedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.event.GetTurnoverCreatedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.event.GetTurnoverCreatedResponse}
 */
proto.event.GetTurnoverCreatedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSummaxturnover(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.event.GetTurnoverCreatedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.event.GetTurnoverCreatedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.event.GetTurnoverCreatedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.event.GetTurnoverCreatedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSummaxturnover();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int32 eventId = 1;
 * @return {number}
 */
proto.event.GetTurnoverCreatedResponse.prototype.getEventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetTurnoverCreatedResponse} returns this
 */
proto.event.GetTurnoverCreatedResponse.prototype.setEventid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.event.GetTurnoverCreatedResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.event.GetTurnoverCreatedResponse} returns this
 */
proto.event.GetTurnoverCreatedResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 sumMaxTurnover = 3;
 * @return {number}
 */
proto.event.GetTurnoverCreatedResponse.prototype.getSummaxturnover = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.event.GetTurnoverCreatedResponse} returns this
 */
proto.event.GetTurnoverCreatedResponse.prototype.setSummaxturnover = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.event);
