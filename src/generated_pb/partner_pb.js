// source: partner.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.user.CreatePartnerResponse', null, global);
goog.exportSymbol('proto.user.GetByFieldRequest', null, global);
goog.exportSymbol('proto.user.PartnerId', null, global);
goog.exportSymbol('proto.user.PartnerInformations', null, global);
goog.exportSymbol('proto.user.PartnerModel', null, global);
goog.exportSymbol('proto.user.PartnerModels', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.GetByFieldRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.GetByFieldRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.GetByFieldRequest.displayName = 'proto.user.GetByFieldRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.CreatePartnerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.CreatePartnerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.CreatePartnerResponse.displayName = 'proto.user.CreatePartnerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.PartnerId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.PartnerId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.PartnerId.displayName = 'proto.user.PartnerId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.PartnerInformations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.PartnerInformations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.PartnerInformations.displayName = 'proto.user.PartnerInformations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.PartnerModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.PartnerModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.PartnerModel.displayName = 'proto.user.PartnerModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.PartnerModels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.PartnerModels.repeatedFields_, null);
};
goog.inherits(proto.user.PartnerModels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.PartnerModels.displayName = 'proto.user.PartnerModels';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.GetByFieldRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.user.GetByFieldRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.GetByFieldRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.GetByFieldRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldValue: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.GetByFieldRequest}
 */
proto.user.GetByFieldRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.GetByFieldRequest;
  return proto.user.GetByFieldRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.GetByFieldRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.GetByFieldRequest}
 */
proto.user.GetByFieldRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.GetByFieldRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.GetByFieldRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.GetByFieldRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.GetByFieldRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.user.GetByFieldRequest.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.GetByFieldRequest} returns this
 */
proto.user.GetByFieldRequest.prototype.setFieldName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string field_value = 2;
 * @return {string}
 */
proto.user.GetByFieldRequest.prototype.getFieldValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.GetByFieldRequest} returns this
 */
proto.user.GetByFieldRequest.prototype.setFieldValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.CreatePartnerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.user.CreatePartnerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.CreatePartnerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.CreatePartnerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    partnerId: (f = msg.getPartnerId()) && proto.user.PartnerId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.CreatePartnerResponse}
 */
proto.user.CreatePartnerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.CreatePartnerResponse;
  return proto.user.CreatePartnerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.CreatePartnerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.CreatePartnerResponse}
 */
proto.user.CreatePartnerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.user.PartnerId;
      reader.readMessage(value,proto.user.PartnerId.deserializeBinaryFromReader);
      msg.setPartnerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.CreatePartnerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.CreatePartnerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.CreatePartnerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.CreatePartnerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPartnerId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.user.PartnerId.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.CreatePartnerResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.user.CreatePartnerResponse} returns this
 */
proto.user.CreatePartnerResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.user.CreatePartnerResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.CreatePartnerResponse} returns this
 */
proto.user.CreatePartnerResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PartnerId partner_id = 3;
 * @return {?proto.user.PartnerId}
 */
proto.user.CreatePartnerResponse.prototype.getPartnerId = function() {
  return /** @type{?proto.user.PartnerId} */ (
    jspb.Message.getWrapperField(this, proto.user.PartnerId, 3));
};


/**
 * @param {?proto.user.PartnerId|undefined} value
 * @return {!proto.user.CreatePartnerResponse} returns this
*/
proto.user.CreatePartnerResponse.prototype.setPartnerId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.user.CreatePartnerResponse} returns this
 */
proto.user.CreatePartnerResponse.prototype.clearPartnerId = function() {
  return this.setPartnerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.user.CreatePartnerResponse.prototype.hasPartnerId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.PartnerId.prototype.toObject = function(opt_includeInstance) {
  return proto.user.PartnerId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.PartnerId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PartnerId.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnerId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.PartnerId}
 */
proto.user.PartnerId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.PartnerId;
  return proto.user.PartnerId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.PartnerId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.PartnerId}
 */
proto.user.PartnerId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartnerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.PartnerId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.PartnerId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.PartnerId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PartnerId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 partner_id = 1;
 * @return {number}
 */
proto.user.PartnerId.prototype.getPartnerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PartnerId} returns this
 */
proto.user.PartnerId.prototype.setPartnerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.PartnerInformations.prototype.toObject = function(opt_includeInstance) {
  return proto.user.PartnerInformations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.PartnerInformations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PartnerInformations.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    countryId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mobile: jspb.Message.getFieldWithDefault(msg, 7, ""),
    birthDate: jspb.Message.getFieldWithDefault(msg, 8, ""),
    createDate: jspb.Message.getFieldWithDefault(msg, 9, ""),
    writeDate: jspb.Message.getFieldWithDefault(msg, 10, ""),
    createUid: jspb.Message.getFieldWithDefault(msg, 11, 0),
    writeUid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    userId: jspb.Message.getFieldWithDefault(msg, 14, 0),
    address: jspb.Message.getFieldWithDefault(msg, 15, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 16, 0),
    zipCode: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.PartnerInformations}
 */
proto.user.PartnerInformations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.PartnerInformations;
  return proto.user.PartnerInformations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.PartnerInformations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.PartnerInformations}
 */
proto.user.PartnerInformations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCountryId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMobile(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBirthDate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateDate(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setWriteDate(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreateUid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWriteUid(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZipCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.PartnerInformations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.PartnerInformations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.PartnerInformations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PartnerInformations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCountryId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMobile();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBirthDate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCreateDate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getWriteDate();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCreateUid();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getWriteUid();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getGender();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getZipCode();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
};


/**
 * optional string firstname = 1;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string lastname = 2;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 country_id = 4;
 * @return {number}
 */
proto.user.PartnerInformations.prototype.getCountryId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setCountryId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string phone = 6;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mobile = 7;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getMobile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setMobile = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string birth_date = 8;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getBirthDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setBirthDate = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string create_date = 9;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getCreateDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setCreateDate = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string write_date = 10;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getWriteDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setWriteDate = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 create_uid = 11;
 * @return {number}
 */
proto.user.PartnerInformations.prototype.getCreateUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setCreateUid = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 write_uid = 12;
 * @return {number}
 */
proto.user.PartnerInformations.prototype.getWriteUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setWriteUid = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool active = 13;
 * @return {boolean}
 */
proto.user.PartnerInformations.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional int32 user_id = 14;
 * @return {number}
 */
proto.user.PartnerInformations.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string address = 15;
 * @return {string}
 */
proto.user.PartnerInformations.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int32 gender = 16;
 * @return {number}
 */
proto.user.PartnerInformations.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setGender = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 zip_code = 17;
 * @return {number}
 */
proto.user.PartnerInformations.prototype.getZipCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PartnerInformations} returns this
 */
proto.user.PartnerInformations.prototype.setZipCode = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.PartnerModel.prototype.toObject = function(opt_includeInstance) {
  return proto.user.PartnerModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.PartnerModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PartnerModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnerId: (f = msg.getPartnerId()) && proto.user.PartnerId.toObject(includeInstance, f),
    partnerInformations: (f = msg.getPartnerInformations()) && proto.user.PartnerInformations.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.PartnerModel}
 */
proto.user.PartnerModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.PartnerModel;
  return proto.user.PartnerModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.PartnerModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.PartnerModel}
 */
proto.user.PartnerModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.PartnerId;
      reader.readMessage(value,proto.user.PartnerId.deserializeBinaryFromReader);
      msg.setPartnerId(value);
      break;
    case 2:
      var value = new proto.user.PartnerInformations;
      reader.readMessage(value,proto.user.PartnerInformations.deserializeBinaryFromReader);
      msg.setPartnerInformations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.PartnerModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.PartnerModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.PartnerModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PartnerModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.user.PartnerId.serializeBinaryToWriter
    );
  }
  f = message.getPartnerInformations();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.user.PartnerInformations.serializeBinaryToWriter
    );
  }
};


/**
 * optional PartnerId partner_id = 1;
 * @return {?proto.user.PartnerId}
 */
proto.user.PartnerModel.prototype.getPartnerId = function() {
  return /** @type{?proto.user.PartnerId} */ (
    jspb.Message.getWrapperField(this, proto.user.PartnerId, 1));
};


/**
 * @param {?proto.user.PartnerId|undefined} value
 * @return {!proto.user.PartnerModel} returns this
*/
proto.user.PartnerModel.prototype.setPartnerId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.user.PartnerModel} returns this
 */
proto.user.PartnerModel.prototype.clearPartnerId = function() {
  return this.setPartnerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.user.PartnerModel.prototype.hasPartnerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PartnerInformations partner_informations = 2;
 * @return {?proto.user.PartnerInformations}
 */
proto.user.PartnerModel.prototype.getPartnerInformations = function() {
  return /** @type{?proto.user.PartnerInformations} */ (
    jspb.Message.getWrapperField(this, proto.user.PartnerInformations, 2));
};


/**
 * @param {?proto.user.PartnerInformations|undefined} value
 * @return {!proto.user.PartnerModel} returns this
*/
proto.user.PartnerModel.prototype.setPartnerInformations = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.user.PartnerModel} returns this
 */
proto.user.PartnerModel.prototype.clearPartnerInformations = function() {
  return this.setPartnerInformations(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.user.PartnerModel.prototype.hasPartnerInformations = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.PartnerModels.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.PartnerModels.prototype.toObject = function(opt_includeInstance) {
  return proto.user.PartnerModels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.PartnerModels} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PartnerModels.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnersList: jspb.Message.toObjectList(msg.getPartnersList(),
    proto.user.PartnerModel.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.PartnerModels}
 */
proto.user.PartnerModels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.PartnerModels;
  return proto.user.PartnerModels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.PartnerModels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.PartnerModels}
 */
proto.user.PartnerModels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.user.PartnerModel;
      reader.readMessage(value,proto.user.PartnerModel.deserializeBinaryFromReader);
      msg.addPartners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.PartnerModels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.PartnerModels.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.PartnerModels} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PartnerModels.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.user.PartnerModel.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PartnerModel partners = 1;
 * @return {!Array<!proto.user.PartnerModel>}
 */
proto.user.PartnerModels.prototype.getPartnersList = function() {
  return /** @type{!Array<!proto.user.PartnerModel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.user.PartnerModel, 1));
};


/**
 * @param {!Array<!proto.user.PartnerModel>} value
 * @return {!proto.user.PartnerModels} returns this
*/
proto.user.PartnerModels.prototype.setPartnersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.user.PartnerModel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.PartnerModel}
 */
proto.user.PartnerModels.prototype.addPartners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.PartnerModel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.PartnerModels} returns this
 */
proto.user.PartnerModels.prototype.clearPartnersList = function() {
  return this.setPartnersList([]);
};


goog.object.extend(exports, proto.user);
